
test_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000186c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08001a0c  08001a0c  00002a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b10  08001b10  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001b10  08001b10  00002b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b18  08001b18  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b18  08001b18  00002b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b1c  08001b1c  00002b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001b20  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000060  08001b80  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001b80  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003148  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d77  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  00006f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000022b  00000000  00000000  00007270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a88  00000000  00000000  0000749b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000584f  00000000  00000000  0001cf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a00  00000000  00000000  00022772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e3c  00000000  00000000  000a71b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000a7ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080019f4 	.word	0x080019f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080019f4 	.word	0x080019f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <TIM4_Init>:

#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "gpio.h"
void TIM4_Init(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <TIM4_Init+0x40>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <TIM4_Init+0x40>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM4->PSC = 84 - 1;         // 84MHz / 84 = 1MHz
 80002cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <TIM4_Init+0x44>)
 80002ce:	2253      	movs	r2, #83	@ 0x53
 80002d0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1000 - 1;       // 1ms (1kHz)
 80002d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <TIM4_Init+0x44>)
 80002d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM4->DIER |= TIM_DIER_UIE;
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <TIM4_Init+0x44>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	4a08      	ldr	r2, [pc, #32]	@ (8000300 <TIM4_Init+0x44>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	60d3      	str	r3, [r2, #12]
    TIM4->CR1 |= TIM_CR1_CEN;
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <TIM4_Init+0x44>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a05      	ldr	r2, [pc, #20]	@ (8000300 <TIM4_Init+0x44>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM4_IRQn);
 80002f2:	201e      	movs	r0, #30
 80002f4:	f7ff ffc4 	bl	8000280 <__NVIC_EnableIRQ>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40023800 	.word	0x40023800
 8000300:	40000800 	.word	0x40000800

08000304 <Buttons_Init>:

void Buttons_Init(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000308:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <Buttons_Init+0x74>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	4a1a      	ldr	r2, [pc, #104]	@ (8000378 <Buttons_Init+0x74>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <Buttons_Init+0x74>)
 8000316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000318:	4a17      	ldr	r2, [pc, #92]	@ (8000378 <Buttons_Init+0x74>)
 800031a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800031e:	6453      	str	r3, [r2, #68]	@ 0x44

    // PA0 và PA1 là input + pull-up
    GPIOA->MODER &= ~((3 << 0) | (3 << 2));  // Input mode
 8000320:	4b16      	ldr	r3, [pc, #88]	@ (800037c <Buttons_Init+0x78>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a15      	ldr	r2, [pc, #84]	@ (800037c <Buttons_Init+0x78>)
 8000326:	f023 030f 	bic.w	r3, r3, #15
 800032a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~((3 << 0) | (3 << 2));
 800032c:	4b13      	ldr	r3, [pc, #76]	@ (800037c <Buttons_Init+0x78>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4a12      	ldr	r2, [pc, #72]	@ (800037c <Buttons_Init+0x78>)
 8000332:	f023 030f 	bic.w	r3, r3, #15
 8000336:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (1 << 0) | (1 << 2);    // Pull-up
 8000338:	4b10      	ldr	r3, [pc, #64]	@ (800037c <Buttons_Init+0x78>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	4a0f      	ldr	r2, [pc, #60]	@ (800037c <Buttons_Init+0x78>)
 800033e:	f043 0305 	orr.w	r3, r3, #5
 8000342:	60d3      	str	r3, [r2, #12]

    // Kết nối EXTI0 và EXTI1 tới PA0 và PA1
    SYSCFG->EXTICR[0] &= ~((0xF << 0) | (0xF << 4));
 8000344:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <Buttons_Init+0x7c>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4a0d      	ldr	r2, [pc, #52]	@ (8000380 <Buttons_Init+0x7c>)
 800034a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800034e:	6093      	str	r3, [r2, #8]

    // Cho phép EXTI0 và EXTI1
    EXTI->IMR |= (1 << 0) | (1 << 1);
 8000350:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <Buttons_Init+0x80>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a0b      	ldr	r2, [pc, #44]	@ (8000384 <Buttons_Init+0x80>)
 8000356:	f043 0303 	orr.w	r3, r3, #3
 800035a:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 0) | (1 << 1); // Ngắt sườn xuống
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <Buttons_Init+0x80>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a08      	ldr	r2, [pc, #32]	@ (8000384 <Buttons_Init+0x80>)
 8000362:	f043 0303 	orr.w	r3, r3, #3
 8000366:	60d3      	str	r3, [r2, #12]

    // Bật NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000368:	2006      	movs	r0, #6
 800036a:	f7ff ff89 	bl	8000280 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI1_IRQn);
 800036e:	2007      	movs	r0, #7
 8000370:	f7ff ff86 	bl	8000280 <__NVIC_EnableIRQ>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40013800 	.word	0x40013800
 8000384:	40013c00 	.word	0x40013c00

08000388 <GPIO_Init>:
void GPIO_Init(void) {
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 800038c:	4b1d      	ldr	r3, [pc, #116]	@ (8000404 <GPIO_Init+0x7c>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4a1c      	ldr	r2, [pc, #112]	@ (8000404 <GPIO_Init+0x7c>)
 8000392:	f043 0305 	orr.w	r3, r3, #5
 8000396:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER &= ~(3 << (5 * 2));
 8000398:	4b1b      	ldr	r3, [pc, #108]	@ (8000408 <GPIO_Init+0x80>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a1a      	ldr	r2, [pc, #104]	@ (8000408 <GPIO_Init+0x80>)
 800039e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003a2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << (5 * 2));
 80003a4:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <GPIO_Init+0x80>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a17      	ldr	r2, [pc, #92]	@ (8000408 <GPIO_Init+0x80>)
 80003aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003ae:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (1 << (5 * 4));
 80003b0:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <GPIO_Init+0x80>)
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	4a14      	ldr	r2, [pc, #80]	@ (8000408 <GPIO_Init+0x80>)
 80003b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003ba:	6213      	str	r3, [r2, #32]
    GPIOC->MODER |= (3 << (1 * 2));
 80003bc:	4b13      	ldr	r3, [pc, #76]	@ (800040c <GPIO_Init+0x84>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a12      	ldr	r2, [pc, #72]	@ (800040c <GPIO_Init+0x84>)
 80003c2:	f043 030c 	orr.w	r3, r3, #12
 80003c6:	6013      	str	r3, [r2, #0]
    // PA8 (Quạt), PA9 (Van), PA10 (Buzzer)
    GPIOA->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)) | (3 << (10 * 2)));
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <GPIO_Init+0x80>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000408 <GPIO_Init+0x80>)
 80003ce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80003d2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((1 << (8 * 2)) | (1 << (9 * 2)) | (1 << (10 * 2))); // Output
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <GPIO_Init+0x80>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000408 <GPIO_Init+0x80>)
 80003da:	f443 13a8 	orr.w	r3, r3, #1376256	@ 0x150000
 80003de:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~((1 << 8) | (1 << 9) | (1 << 10)); // Push-pull
 80003e0:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <GPIO_Init+0x80>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	4a08      	ldr	r2, [pc, #32]	@ (8000408 <GPIO_Init+0x80>)
 80003e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80003ea:	6053      	str	r3, [r2, #4]
    GPIOA->ODR &= ~((1 << 8) | (1 << 9) | (1 << 10)); // Tắt ban đầu
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <GPIO_Init+0x80>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a05      	ldr	r2, [pc, #20]	@ (8000408 <GPIO_Init+0x80>)
 80003f2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80003f6:	6153      	str	r3, [r2, #20]

}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000
 800040c:	40020800 	.word	0x40020800

08000410 <ADC_Init>:
void ADC_Init(void) {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000414:	4b11      	ldr	r3, [pc, #68]	@ (800045c <ADC_Init+0x4c>)
 8000416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000418:	4a10      	ldr	r2, [pc, #64]	@ (800045c <ADC_Init+0x4c>)
 800041a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800041e:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 = 0; // Tắt ADC để cấu hình
 8000420:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <ADC_Init+0x50>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
    ADC1->SQR1 &= ~(0xF << 20); // 1 lần chuyển đổi
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <ADC_Init+0x50>)
 8000428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800042a:	4a0d      	ldr	r2, [pc, #52]	@ (8000460 <ADC_Init+0x50>)
 800042c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000430:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ADC1->SQR3 = 11; // Kênh 11 (PC1)
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <ADC_Init+0x50>)
 8000434:	220b      	movs	r2, #11
 8000436:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR1 |= (7 << 3); // Sampling time 480 cycles cho kênh 11 (bit 3-5)
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ADC_Init+0x50>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ADC_Init+0x50>)
 800043e:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8000442:	60d3      	str	r3, [r2, #12]
    ADC1->CR2 |= ADC_CR2_ADON;
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ADC_Init+0x50>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	4a05      	ldr	r2, [pc, #20]	@ (8000460 <ADC_Init+0x50>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6093      	str	r3, [r2, #8]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40023800 	.word	0x40023800
 8000460:	40012000 	.word	0x40012000

08000464 <I2C1_Init>:
#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "i2c.h"
#include "uart.h"
void I2C1_Init(void) {
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000468:	4b27      	ldr	r3, [pc, #156]	@ (8000508 <I2C1_Init+0xa4>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046c:	4a26      	ldr	r2, [pc, #152]	@ (8000508 <I2C1_Init+0xa4>)
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000474:	4b24      	ldr	r3, [pc, #144]	@ (8000508 <I2C1_Init+0xa4>)
 8000476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000478:	4a23      	ldr	r2, [pc, #140]	@ (8000508 <I2C1_Init+0xa4>)
 800047a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800047e:	6413      	str	r3, [r2, #64]	@ 0x40

    // Cấu hình PB6 (SCL) & PB9 (SDA) - cả hai là AF4
    GPIOB->MODER &= ~((3 << (6 * 2)) | (3 << (9 * 2)));
 8000480:	4b22      	ldr	r3, [pc, #136]	@ (800050c <I2C1_Init+0xa8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a21      	ldr	r2, [pc, #132]	@ (800050c <I2C1_Init+0xa8>)
 8000486:	f423 2343 	bic.w	r3, r3, #798720	@ 0xc3000
 800048a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((2 << (6 * 2)) | (2 << (9 * 2)));
 800048c:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <I2C1_Init+0xa8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1e      	ldr	r2, [pc, #120]	@ (800050c <I2C1_Init+0xa8>)
 8000492:	f443 2302 	orr.w	r3, r3, #532480	@ 0x82000
 8000496:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (1 << 6) | (1 << 9);  // Open-drain
 8000498:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <I2C1_Init+0xa8>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a1b      	ldr	r2, [pc, #108]	@ (800050c <I2C1_Init+0xa8>)
 800049e:	f443 7310 	orr.w	r3, r3, #576	@ 0x240
 80004a2:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR  &= ~((3 << (6 * 2)) | (3 << (9 * 2))); // No pull-up/down
 80004a4:	4b19      	ldr	r3, [pc, #100]	@ (800050c <I2C1_Init+0xa8>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a18      	ldr	r2, [pc, #96]	@ (800050c <I2C1_Init+0xa8>)
 80004aa:	f423 2343 	bic.w	r3, r3, #798720	@ 0xc3000
 80004ae:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] &= ~(0xF << (6 * 4)); // Clear AF for PB6
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <I2C1_Init+0xa8>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	4a15      	ldr	r2, [pc, #84]	@ (800050c <I2C1_Init+0xa8>)
 80004b6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80004ba:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  (4 << (6 * 4));   // AF4 for PB6 (SCL)
 80004bc:	4b13      	ldr	r3, [pc, #76]	@ (800050c <I2C1_Init+0xa8>)
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	4a12      	ldr	r2, [pc, #72]	@ (800050c <I2C1_Init+0xa8>)
 80004c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80004c6:	6213      	str	r3, [r2, #32]

    GPIOB->AFR[1] &= ~(0xF << ((9 - 8) * 4)); // Clear AF for PB9
 80004c8:	4b10      	ldr	r3, [pc, #64]	@ (800050c <I2C1_Init+0xa8>)
 80004ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004cc:	4a0f      	ldr	r2, [pc, #60]	@ (800050c <I2C1_Init+0xa8>)
 80004ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004d2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((9 - 8) * 4));   // AF4 for PB9 (SDA)
 80004d4:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <I2C1_Init+0xa8>)
 80004d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004d8:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <I2C1_Init+0xa8>)
 80004da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004de:	6253      	str	r3, [r2, #36]	@ 0x24

    // Cấu hình tốc độ I2C 100kHz @16MHz
    I2C1->CR2 = 16;
 80004e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <I2C1_Init+0xac>)
 80004e2:	2210      	movs	r2, #16
 80004e4:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 80004e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <I2C1_Init+0xac>)
 80004e8:	2250      	movs	r2, #80	@ 0x50
 80004ea:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 80004ec:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <I2C1_Init+0xac>)
 80004ee:	2211      	movs	r2, #17
 80004f0:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <I2C1_Init+0xac>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a06      	ldr	r2, [pc, #24]	@ (8000510 <I2C1_Init+0xac>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40023800 	.word	0x40023800
 800050c:	40020400 	.word	0x40020400
 8000510:	40005400 	.word	0x40005400

08000514 <I2C_Scan>:
// ===== I2C SCAN =====
void I2C_Scan(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0
    char msg[32];
    USART2_SendString("Scanning I2C bus...\r\n");
 800051a:	4832      	ldr	r0, [pc, #200]	@ (80005e4 <I2C_Scan+0xd0>)
 800051c:	f000 fd7e 	bl	800101c <USART2_SendString>
    for (uint8_t addr = 0x08; addr <= 0x77; addr++) {
 8000520:	2308      	movs	r3, #8
 8000522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000526:	e051      	b.n	80005cc <I2C_Scan+0xb8>
        I2C1->CR1 |= I2C_CR1_START;
 8000528:	4b2f      	ldr	r3, [pc, #188]	@ (80005e8 <I2C_Scan+0xd4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a2e      	ldr	r2, [pc, #184]	@ (80005e8 <I2C_Scan+0xd4>)
 800052e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000532:	6013      	str	r3, [r2, #0]
        while (!(I2C1->SR1 & I2C_SR1_SB));
 8000534:	bf00      	nop
 8000536:	4b2c      	ldr	r3, [pc, #176]	@ (80005e8 <I2C_Scan+0xd4>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f9      	beq.n	8000536 <I2C_Scan+0x22>
        (void)I2C1->SR1;
 8000542:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <I2C_Scan+0xd4>)
 8000544:	695b      	ldr	r3, [r3, #20]
        I2C1->DR = addr << 1;
 8000546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800054a:	4a27      	ldr	r2, [pc, #156]	@ (80005e8 <I2C_Scan+0xd4>)
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	6113      	str	r3, [r2, #16]

        uint32_t timeout = 1000;
 8000550:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000554:	623b      	str	r3, [r7, #32]
        while (!(I2C1->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF)) && --timeout);
 8000556:	bf00      	nop
 8000558:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <I2C_Scan+0xd4>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	f240 4302 	movw	r3, #1026	@ 0x402
 8000560:	4013      	ands	r3, r2
 8000562:	2b00      	cmp	r3, #0
 8000564:	d105      	bne.n	8000572 <I2C_Scan+0x5e>
 8000566:	6a3b      	ldr	r3, [r7, #32]
 8000568:	3b01      	subs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1f2      	bne.n	8000558 <I2C_Scan+0x44>

        if (I2C1->SR1 & I2C_SR1_ADDR) {
 8000572:	4b1d      	ldr	r3, [pc, #116]	@ (80005e8 <I2C_Scan+0xd4>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	2b00      	cmp	r3, #0
 800057c:	d015      	beq.n	80005aa <I2C_Scan+0x96>
            (void)I2C1->SR1;
 800057e:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <I2C_Scan+0xd4>)
 8000580:	695b      	ldr	r3, [r3, #20]
            (void)I2C1->SR2;
 8000582:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <I2C_Scan+0xd4>)
 8000584:	699b      	ldr	r3, [r3, #24]
            I2C1->CR1 |= I2C_CR1_STOP;
 8000586:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <I2C_Scan+0xd4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a17      	ldr	r2, [pc, #92]	@ (80005e8 <I2C_Scan+0xd4>)
 800058c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000590:	6013      	str	r3, [r2, #0]
            sprintf(msg, "Found device at 0x%02X\r\n", addr);
 8000592:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000596:	463b      	mov	r3, r7
 8000598:	4914      	ldr	r1, [pc, #80]	@ (80005ec <I2C_Scan+0xd8>)
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fd92 	bl	80010c4 <siprintf>
            USART2_SendString(msg);
 80005a0:	463b      	mov	r3, r7
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fd3a 	bl	800101c <USART2_SendString>
 80005a8:	e00b      	b.n	80005c2 <I2C_Scan+0xae>
        } else {
            I2C1->CR1 |= I2C_CR1_STOP;
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <I2C_Scan+0xd4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <I2C_Scan+0xd4>)
 80005b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b4:	6013      	str	r3, [r2, #0]
            I2C1->SR1 &= ~I2C_SR1_AF;
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <I2C_Scan+0xd4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a0b      	ldr	r2, [pc, #44]	@ (80005e8 <I2C_Scan+0xd4>)
 80005bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80005c0:	6153      	str	r3, [r2, #20]
    for (uint8_t addr = 0x08; addr <= 0x77; addr++) {
 80005c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005c6:	3301      	adds	r3, #1
 80005c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80005cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005d0:	2b77      	cmp	r3, #119	@ 0x77
 80005d2:	d9a9      	bls.n	8000528 <I2C_Scan+0x14>
        }
    }
    USART2_SendString("I2C scan completed.\r\n");
 80005d4:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <I2C_Scan+0xdc>)
 80005d6:	f000 fd21 	bl	800101c <USART2_SendString>
}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	@ 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	08001a0c 	.word	0x08001a0c
 80005e8:	40005400 	.word	0x40005400
 80005ec:	08001a24 	.word	0x08001a24
 80005f0:	08001a40 	.word	0x08001a40

080005f4 <I2C1_WriteByte>:

void I2C1_WriteByte(uint8_t addr, uint8_t data) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 8000604:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <I2C1_WriteByte+0x84>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <I2C1_WriteByte+0x84>)
 800060a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800060e:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000610:	bf00      	nop
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <I2C1_WriteByte+0x84>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <I2C1_WriteByte+0x1e>
    (void)I2C1->SR1;
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <I2C1_WriteByte+0x84>)
 8000620:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr;
 8000622:	4a15      	ldr	r2, [pc, #84]	@ (8000678 <I2C1_WriteByte+0x84>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000628:	bf00      	nop
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <I2C1_WriteByte+0x84>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f9      	beq.n	800062a <I2C1_WriteByte+0x36>
    (void)I2C1->SR1;
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <I2C1_WriteByte+0x84>)
 8000638:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <I2C1_WriteByte+0x84>)
 800063c:	699b      	ldr	r3, [r3, #24]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 800063e:	bf00      	nop
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <I2C1_WriteByte+0x84>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f9      	beq.n	8000640 <I2C1_WriteByte+0x4c>
    I2C1->DR = data;
 800064c:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <I2C1_WriteByte+0x84>)
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000652:	bf00      	nop
 8000654:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <I2C1_WriteByte+0x84>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f9      	beq.n	8000654 <I2C1_WriteByte+0x60>
    I2C1->CR1 |= I2C_CR1_STOP;
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <I2C1_WriteByte+0x84>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <I2C1_WriteByte+0x84>)
 8000666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40005400 	.word	0x40005400

0800067c <lcd_send_cmd>:
#include <stdio.h>
#include "lcd.h"
#include "i2c.h"
#include "main.h"

void lcd_send_cmd(uint8_t cmd) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
    uint8_t high = cmd & 0xF0;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f023 030f 	bic.w	r3, r3, #15
 800068c:	74fb      	strb	r3, [r7, #19]
    uint8_t low  = (cmd << 4) & 0xF0;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 8000694:	7cfb      	ldrb	r3, [r7, #19]
 8000696:	f043 030c 	orr.w	r3, r3, #12
 800069a:	b2db      	uxtb	r3, r3
 800069c:	733b      	strb	r3, [r7, #12]
 800069e:	7cfb      	ldrb	r3, [r7, #19]
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	737b      	strb	r3, [r7, #13]
 80006a8:	7cbb      	ldrb	r3, [r7, #18]
 80006aa:	f043 030c 	orr.w	r3, r3, #12
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	7cbb      	ldrb	r3, [r7, #18]
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	73fb      	strb	r3, [r7, #15]
        high | 0x0C,
        high | 0x08,
        low  | 0x0C,
        low  | 0x08
    };
    for (int i = 0; i < 4; i++) {
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e00e      	b.n	80006e0 <lcd_send_cmd+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 80006c2:	f107 020c 	add.w	r2, r7, #12
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	204e      	movs	r0, #78	@ 0x4e
 80006d0:	f7ff ff90 	bl	80005f4 <I2C1_WriteByte>
        delay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 fa53 	bl	8000b80 <delay>
    for (int i = 0; i < 4; i++) {
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	3301      	adds	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	dded      	ble.n	80006c2 <lcd_send_cmd+0x46>
    }
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
    uint8_t high = data & 0xF0;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	f023 030f 	bic.w	r3, r3, #15
 8000700:	74fb      	strb	r3, [r7, #19]
    uint8_t low  = (data << 4) & 0xF0;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 8000708:	7cfb      	ldrb	r3, [r7, #19]
 800070a:	f043 030d 	orr.w	r3, r3, #13
 800070e:	b2db      	uxtb	r3, r3
 8000710:	733b      	strb	r3, [r7, #12]
 8000712:	7cfb      	ldrb	r3, [r7, #19]
 8000714:	f043 0309 	orr.w	r3, r3, #9
 8000718:	b2db      	uxtb	r3, r3
 800071a:	737b      	strb	r3, [r7, #13]
 800071c:	7cbb      	ldrb	r3, [r7, #18]
 800071e:	f043 030d 	orr.w	r3, r3, #13
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73bb      	strb	r3, [r7, #14]
 8000726:	7cbb      	ldrb	r3, [r7, #18]
 8000728:	f043 0309 	orr.w	r3, r3, #9
 800072c:	b2db      	uxtb	r3, r3
 800072e:	73fb      	strb	r3, [r7, #15]
        high | 0x0D,
        high | 0x09,
        low  | 0x0D,
        low  | 0x09
    };
    for (int i = 0; i < 4; i++) {
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e00e      	b.n	8000754 <lcd_send_data+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 8000736:	f107 020c 	add.w	r2, r7, #12
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	4413      	add	r3, r2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	204e      	movs	r0, #78	@ 0x4e
 8000744:	f7ff ff56 	bl	80005f4 <I2C1_WriteByte>
        delay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fa19 	bl	8000b80 <delay>
    for (int i = 0; i < 4; i++) {
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	2b03      	cmp	r3, #3
 8000758:	dded      	ble.n	8000736 <lcd_send_data+0x46>
    }
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <lcd_init>:

void lcd_init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    delay(100); // Cho LCD đủ thời gian lên nguồn
 8000768:	2064      	movs	r0, #100	@ 0x64
 800076a:	f000 fa09 	bl	8000b80 <delay>
    lcd_send_cmd(0x33);
 800076e:	2033      	movs	r0, #51	@ 0x33
 8000770:	f7ff ff84 	bl	800067c <lcd_send_cmd>
    lcd_send_cmd(0x32);
 8000774:	2032      	movs	r0, #50	@ 0x32
 8000776:	f7ff ff81 	bl	800067c <lcd_send_cmd>
    lcd_send_cmd(0x28);
 800077a:	2028      	movs	r0, #40	@ 0x28
 800077c:	f7ff ff7e 	bl	800067c <lcd_send_cmd>
    lcd_send_cmd(0x0C);
 8000780:	200c      	movs	r0, #12
 8000782:	f7ff ff7b 	bl	800067c <lcd_send_cmd>
    lcd_send_cmd(0x06);
 8000786:	2006      	movs	r0, #6
 8000788:	f7ff ff78 	bl	800067c <lcd_send_cmd>
    lcd_send_cmd(0x01);
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff75 	bl	800067c <lcd_send_cmd>
    delay(2);
 8000792:	2002      	movs	r0, #2
 8000794:	f000 f9f4 	bl	8000b80 <delay>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <lcd_send_string>:

void lcd_send_string(char *str) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    while (*str) {
 80007a4:	e006      	b.n	80007b4 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff9e 	bl	80006f0 <lcd_send_data>
    while (*str) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f4      	bne.n	80007a6 <lcd_send_string+0xa>
    }
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t row, uint8_t col) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	460a      	mov	r2, r1
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	4613      	mov	r3, r2
 80007d4:	71bb      	strb	r3, [r7, #6]
    lcd_send_cmd((row == 0 ? 0x80 : 0xC0) + col);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d101      	bne.n	80007e0 <lcd_set_cursor+0x1a>
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	e000      	b.n	80007e2 <lcd_set_cursor+0x1c>
 80007e0:	22c0      	movs	r2, #192	@ 0xc0
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	4413      	add	r3, r2
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff47 	bl	800067c <lcd_send_cmd>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007fc:	f3bf 8f4f 	dsb	sy
}
 8000800:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <__NVIC_SystemReset+0x24>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800080a:	4904      	ldr	r1, [pc, #16]	@ (800081c <__NVIC_SystemReset+0x24>)
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <__NVIC_SystemReset+0x28>)
 800080e:	4313      	orrs	r3, r2
 8000810:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
}
 8000816:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <__NVIC_SystemReset+0x20>
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	05fa0004 	.word	0x05fa0004

08000824 <detect_gas_level>:
    GAS_NONE = 0,        // 0 – Không có khí
    GAS_LOW = 1,             // 1 – Nồng độ thấp
    GAS_HIGH = 2,            // 2 – Nồng độ cao
    GAS_DANGEROUS = 3        // 3 – Nguy hiểm
} GasState;
GasState detect_gas_level(uint32_t adc) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	    if (adc < 1000) return GAS_NONE;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000832:	d201      	bcs.n	8000838 <detect_gas_level+0x14>
 8000834:	2300      	movs	r3, #0
 8000836:	e00d      	b.n	8000854 <detect_gas_level+0x30>
	    else if (adc < 2000) return GAS_LOW;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800083e:	d201      	bcs.n	8000844 <detect_gas_level+0x20>
 8000840:	2301      	movs	r3, #1
 8000842:	e007      	b.n	8000854 <detect_gas_level+0x30>
	    else if (adc < 3000) return GAS_HIGH;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800084a:	4293      	cmp	r3, r2
 800084c:	d801      	bhi.n	8000852 <detect_gas_level+0x2e>
 800084e:	2302      	movs	r3, #2
 8000850:	e000      	b.n	8000854 <detect_gas_level+0x30>
	    else return GAS_DANGEROUS;
 8000852:	2303      	movs	r3, #3
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <handle_gas_state>:
static uint32_t last_toggle = 0;
static uint8_t toggle = 0;
void handle_gas_state(GasState state, SystemState sys) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
    static GasState prev_state = -1;
    static SystemState prev = -1;

    if ((state != prev_state) || (sys != prev)) {
 8000870:	4b62      	ldr	r3, [pc, #392]	@ (80009fc <handle_gas_state+0x19c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	429a      	cmp	r2, r3
 8000878:	d104      	bne.n	8000884 <handle_gas_state+0x24>
 800087a:	4b61      	ldr	r3, [pc, #388]	@ (8000a00 <handle_gas_state+0x1a0>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	79ba      	ldrb	r2, [r7, #6]
 8000880:	429a      	cmp	r2, r3
 8000882:	d077      	beq.n	8000974 <handle_gas_state+0x114>
        lcd_set_cursor(1, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2001      	movs	r0, #1
 8000888:	f7ff ff9d 	bl	80007c6 <lcd_set_cursor>

        if (sys == SYS_IDLE) {
 800088c:	79bb      	ldrb	r3, [r7, #6]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10b      	bne.n	80008aa <handle_gas_state+0x4a>
            RGB_SetPWM(0, 255, 0);  // LED xanh lá
 8000892:	2200      	movs	r2, #0
 8000894:	21ff      	movs	r1, #255	@ 0xff
 8000896:	2000      	movs	r0, #0
 8000898:	f000 fa4e 	bl	8000d38 <RGB_SetPWM>
            lcd_send_string("Idle ");
 800089c:	4859      	ldr	r0, [pc, #356]	@ (8000a04 <handle_gas_state+0x1a4>)
 800089e:	f7ff ff7d 	bl	800079c <lcd_send_string>
            // Tắt hết thiết bị (HIGH = rơ-le ngắt)
            GPIOA->BSRR = (1 << 8) | (1 << 9) | (1 << 10+16);
 80008a2:	4b59      	ldr	r3, [pc, #356]	@ (8000a08 <handle_gas_state+0x1a8>)
 80008a4:	4a59      	ldr	r2, [pc, #356]	@ (8000a0c <handle_gas_state+0x1ac>)
 80008a6:	619a      	str	r2, [r3, #24]
 80008a8:	e05e      	b.n	8000968 <handle_gas_state+0x108>
        } else {
            switch (state) {
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d85b      	bhi.n	8000968 <handle_gas_state+0x108>
 80008b0:	a201      	add	r2, pc, #4	@ (adr r2, 80008b8 <handle_gas_state+0x58>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	080008f3 	.word	0x080008f3
 80008c0:	0800091d 	.word	0x0800091d
 80008c4:	08000943 	.word	0x08000943
                case GAS_NONE:
                    RGB_SetPWM(0, 0, 255);  // Xanh dương
 80008c8:	22ff      	movs	r2, #255	@ 0xff
 80008ca:	2100      	movs	r1, #0
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 fa33 	bl	8000d38 <RGB_SetPWM>
                    lcd_send_string("0     ");
 80008d2:	484f      	ldr	r0, [pc, #316]	@ (8000a10 <handle_gas_state+0x1b0>)
 80008d4:	f7ff ff62 	bl	800079c <lcd_send_string>
                    GPIOA->BSRR = (1 << 8);        // PA8 HIGH → Quạt TẮT
 80008d8:	4b4b      	ldr	r3, [pc, #300]	@ (8000a08 <handle_gas_state+0x1a8>)
 80008da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008de:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << 9);   // PA9 LOW  → Van BẬT
 80008e0:	4b49      	ldr	r3, [pc, #292]	@ (8000a08 <handle_gas_state+0x1a8>)
 80008e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e6:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << (10+16));       // PA10 HIGH → Buzzer TẮT
 80008e8:	4b47      	ldr	r3, [pc, #284]	@ (8000a08 <handle_gas_state+0x1a8>)
 80008ea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008ee:	619a      	str	r2, [r3, #24]
                    break;
 80008f0:	e03a      	b.n	8000968 <handle_gas_state+0x108>

                case GAS_LOW:
                    RGB_SetPWM(255, 255, 0); // Vàng
 80008f2:	2200      	movs	r2, #0
 80008f4:	21ff      	movs	r1, #255	@ 0xff
 80008f6:	20ff      	movs	r0, #255	@ 0xff
 80008f8:	f000 fa1e 	bl	8000d38 <RGB_SetPWM>
                    lcd_send_string("1     ");
 80008fc:	4845      	ldr	r0, [pc, #276]	@ (8000a14 <handle_gas_state+0x1b4>)
 80008fe:	f7ff ff4d 	bl	800079c <lcd_send_string>
                    GPIOA->BSRR = (1 << (8 + 16));   // PA8 LOW  → Quạt BẬT
 8000902:	4b41      	ldr	r3, [pc, #260]	@ (8000a08 <handle_gas_state+0x1a8>)
 8000904:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000908:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << (9));        // PA9 HIGH → Van TẮT
 800090a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a08 <handle_gas_state+0x1a8>)
 800090c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000910:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << (10+16));       // PA10 HIGH → Buzzer TẮT
 8000912:	4b3d      	ldr	r3, [pc, #244]	@ (8000a08 <handle_gas_state+0x1a8>)
 8000914:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000918:	619a      	str	r2, [r3, #24]
                    break;
 800091a:	e025      	b.n	8000968 <handle_gas_state+0x108>

                case GAS_HIGH:
                    last_toggle = millis;
 800091c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a18 <handle_gas_state+0x1b8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a3e      	ldr	r2, [pc, #248]	@ (8000a1c <handle_gas_state+0x1bc>)
 8000922:	6013      	str	r3, [r2, #0]
                    toggle = 1;
 8000924:	4b3e      	ldr	r3, [pc, #248]	@ (8000a20 <handle_gas_state+0x1c0>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
                    RGB_SetPWM(255, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	20ff      	movs	r0, #255	@ 0xff
 8000930:	f000 fa02 	bl	8000d38 <RGB_SetPWM>
                    lcd_send_string("2     ");
 8000934:	483b      	ldr	r0, [pc, #236]	@ (8000a24 <handle_gas_state+0x1c4>)
 8000936:	f7ff ff31 	bl	800079c <lcd_send_string>
                    GPIOA->BSRR = (1 << (8 + 16)) | (1 << (9 + 16)) | (1 << 10 ); // Tất cả LOW → Bật
 800093a:	4b33      	ldr	r3, [pc, #204]	@ (8000a08 <handle_gas_state+0x1a8>)
 800093c:	4a3a      	ldr	r2, [pc, #232]	@ (8000a28 <handle_gas_state+0x1c8>)
 800093e:	619a      	str	r2, [r3, #24]
                    break;
 8000940:	e012      	b.n	8000968 <handle_gas_state+0x108>

                case GAS_DANGEROUS:
                    last_toggle = millis;
 8000942:	4b35      	ldr	r3, [pc, #212]	@ (8000a18 <handle_gas_state+0x1b8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a35      	ldr	r2, [pc, #212]	@ (8000a1c <handle_gas_state+0x1bc>)
 8000948:	6013      	str	r3, [r2, #0]
                    toggle = 1;
 800094a:	4b35      	ldr	r3, [pc, #212]	@ (8000a20 <handle_gas_state+0x1c0>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                    RGB_SetPWM(255, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	20ff      	movs	r0, #255	@ 0xff
 8000956:	f000 f9ef 	bl	8000d38 <RGB_SetPWM>
                    lcd_send_string("3     ");
 800095a:	4834      	ldr	r0, [pc, #208]	@ (8000a2c <handle_gas_state+0x1cc>)
 800095c:	f7ff ff1e 	bl	800079c <lcd_send_string>
                    GPIOA->BSRR = (1 << (8 + 16)) | (1 << (9 + 16)) | (1 << 10 ); // Tất cả LOW → Bật
 8000960:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <handle_gas_state+0x1a8>)
 8000962:	4a31      	ldr	r2, [pc, #196]	@ (8000a28 <handle_gas_state+0x1c8>)
 8000964:	619a      	str	r2, [r3, #24]
                    break;
 8000966:	bf00      	nop
            }
        }

        prev_state = state;
 8000968:	4a24      	ldr	r2, [pc, #144]	@ (80009fc <handle_gas_state+0x19c>)
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	7013      	strb	r3, [r2, #0]
        prev = sys;
 800096e:	4a24      	ldr	r2, [pc, #144]	@ (8000a00 <handle_gas_state+0x1a0>)
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	7013      	strb	r3, [r2, #0]
    }

    // Nháy LED đỏ nếu cần
    if (sys == SYS_ACTIVE) {
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d13c      	bne.n	80009f4 <handle_gas_state+0x194>
        if (state == GAS_HIGH && millis - last_toggle >= 500) {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d11b      	bne.n	80009b8 <handle_gas_state+0x158>
 8000980:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <handle_gas_state+0x1b8>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <handle_gas_state+0x1bc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800098e:	d313      	bcc.n	80009b8 <handle_gas_state+0x158>
            toggle ^= 1;
 8000990:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <handle_gas_state+0x1c0>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	f083 0301 	eor.w	r3, r3, #1
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <handle_gas_state+0x1c0>)
 800099c:	701a      	strb	r2, [r3, #0]
            RGB_SetPWM(toggle * 255, 0, 0);
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <handle_gas_state+0x1c0>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	425b      	negs	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f9c4 	bl	8000d38 <RGB_SetPWM>
            last_toggle = millis;
 80009b0:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <handle_gas_state+0x1b8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <handle_gas_state+0x1bc>)
 80009b6:	6013      	str	r3, [r2, #0]
        }

        if (state == GAS_DANGEROUS && millis - last_toggle >= 125) {
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d11a      	bne.n	80009f4 <handle_gas_state+0x194>
 80009be:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <handle_gas_state+0x1b8>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <handle_gas_state+0x1bc>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2b7c      	cmp	r3, #124	@ 0x7c
 80009ca:	d913      	bls.n	80009f4 <handle_gas_state+0x194>
            toggle ^= 1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <handle_gas_state+0x1c0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <handle_gas_state+0x1c0>)
 80009d8:	701a      	strb	r2, [r3, #0]
            RGB_SetPWM(toggle * 255, 0, 0);
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <handle_gas_state+0x1c0>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	425b      	negs	r3, r3
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f9a6 	bl	8000d38 <RGB_SetPWM>
            last_toggle = millis;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <handle_gas_state+0x1b8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <handle_gas_state+0x1bc>)
 80009f2:	6013      	str	r3, [r2, #0]
        }
    }
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000005 	.word	0x20000005
 8000a00:	20000006 	.word	0x20000006
 8000a04:	08001a58 	.word	0x08001a58
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	04000300 	.word	0x04000300
 8000a10:	08001a60 	.word	0x08001a60
 8000a14:	08001a68 	.word	0x08001a68
 8000a18:	2000007c 	.word	0x2000007c
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	20000084 	.word	0x20000084
 8000a24:	08001a70 	.word	0x08001a70
 8000a28:	03000400 	.word	0x03000400
 8000a2c:	08001a78 	.word	0x08001a78

08000a30 <main>:

// ===== MAIN =====
int main(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	@ 0x30
 8000a34:	af00      	add	r7, sp, #0
    SystemCoreClockUpdate();
 8000a36:	f000 fa19 	bl	8000e6c <SystemCoreClockUpdate>
    USART2_Init();
 8000a3a:	f000 fa8d 	bl	8000f58 <USART2_Init>
    GPIO_Init();         // PC1 - ADC
 8000a3e:	f7ff fca3 	bl	8000388 <GPIO_Init>
    Buttons_Init();      // SW1, SW2
 8000a42:	f7ff fc5f 	bl	8000304 <Buttons_Init>
    ADC_Init();
 8000a46:	f7ff fce3 	bl	8000410 <ADC_Init>
    I2C1_Init();
 8000a4a:	f7ff fd0b 	bl	8000464 <I2C1_Init>
    TIM4_Init();
 8000a4e:	f7ff fc35 	bl	80002bc <TIM4_Init>
    RGB_PWM_Init();      // PA5, PA6, PA7 dùng PWM cho LED RGB
 8000a52:	f000 f8ff 	bl	8000c54 <RGB_PWM_Init>
//  TIM3_Init();         // Nếu dùng millis để nhấp nháy, bật lại
    USART2_SendString("Hello STM32 + I2C Scan\r\n");
 8000a56:	483e      	ldr	r0, [pc, #248]	@ (8000b50 <main+0x120>)
 8000a58:	f000 fae0 	bl	800101c <USART2_SendString>
    I2C_Scan();
 8000a5c:	f7ff fd5a 	bl	8000514 <I2C_Scan>
    lcd_init();
 8000a60:	f7ff fe80 	bl	8000764 <lcd_init>

    char msg[40];
    uint32_t adc_value;

    while (1) {
    	if (sys_state == SYS_ACTIVE) {
 8000a64:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <main+0x124>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d15d      	bne.n	8000b28 <main+0xf8>
    	    if ((millis - last_adc_time) >=10) {
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b58 <main+0x128>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b3a      	ldr	r3, [pc, #232]	@ (8000b5c <main+0x12c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2b09      	cmp	r3, #9
 8000a78:	d947      	bls.n	8000b0a <main+0xda>
    	        last_adc_time = millis;
 8000a7a:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <main+0x128>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a37      	ldr	r2, [pc, #220]	@ (8000b5c <main+0x12c>)
 8000a80:	6013      	str	r3, [r2, #0]
        		lcd_set_cursor(0,0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fe9e 	bl	80007c6 <lcd_set_cursor>
        		lcd_send_string("Gas:");
 8000a8a:	4835      	ldr	r0, [pc, #212]	@ (8000b60 <main+0x130>)
 8000a8c:	f7ff fe86 	bl	800079c <lcd_send_string>
            	lcd_set_cursor(0, 15);
 8000a90:	210f      	movs	r1, #15
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff fe97 	bl	80007c6 <lcd_set_cursor>
            	lcd_send_string("1");
 8000a98:	4832      	ldr	r0, [pc, #200]	@ (8000b64 <main+0x134>)
 8000a9a:	f7ff fe7f 	bl	800079c <lcd_send_string>
        	    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000a9e:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <main+0x138>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	4a31      	ldr	r2, [pc, #196]	@ (8000b68 <main+0x138>)
 8000aa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000aa8:	6093      	str	r3, [r2, #8]
        	    while (!(ADC1->SR & ADC_SR_EOC));
 8000aaa:	bf00      	nop
 8000aac:	4b2e      	ldr	r3, [pc, #184]	@ (8000b68 <main+0x138>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0f9      	beq.n	8000aac <main+0x7c>
        	    adc_value = ADC1->DR;
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b68 <main+0x138>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	    // Gửi UART + LCD
        	    sprintf(msg, "Gas: %lu ppm\r\n", adc_value);
 8000abe:	463b      	mov	r3, r7
 8000ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ac2:	492a      	ldr	r1, [pc, #168]	@ (8000b6c <main+0x13c>)
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fafd 	bl	80010c4 <siprintf>
        	    USART2_SendString(msg);
 8000aca:	463b      	mov	r3, r7
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 faa5 	bl	800101c <USART2_SendString>
        	    sprintf(msg, "%lu", adc_value);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad6:	4926      	ldr	r1, [pc, #152]	@ (8000b70 <main+0x140>)
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 faf3 	bl	80010c4 <siprintf>
        	    lcd_set_cursor(0, 5);
 8000ade:	2105      	movs	r1, #5
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fe70 	bl	80007c6 <lcd_set_cursor>
        	    lcd_send_string("    ");
 8000ae6:	4823      	ldr	r0, [pc, #140]	@ (8000b74 <main+0x144>)
 8000ae8:	f7ff fe58 	bl	800079c <lcd_send_string>
        	    lcd_set_cursor(0, 5);
 8000aec:	2105      	movs	r1, #5
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff fe69 	bl	80007c6 <lcd_set_cursor>
        	    lcd_send_string(msg);
 8000af4:	463b      	mov	r3, r7
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe50 	bl	800079c <lcd_send_string>
        	    lcd_set_cursor(0, 10);
 8000afc:	210a      	movs	r1, #10
 8000afe:	2000      	movs	r0, #0
 8000b00:	f7ff fe61 	bl	80007c6 <lcd_set_cursor>
        	    lcd_send_string("ppm");
 8000b04:	481c      	ldr	r0, [pc, #112]	@ (8000b78 <main+0x148>)
 8000b06:	f7ff fe49 	bl	800079c <lcd_send_string>
    	    }
    	    // Máy trạng thái
    	    GasState current = detect_gas_level(adc_value);
 8000b0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000b0c:	f7ff fe8a 	bl	8000824 <detect_gas_level>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    	    handle_gas_state(current,sys_state);
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <main+0x124>)
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fe9d 	bl	8000860 <handle_gas_state>
 8000b26:	e79d      	b.n	8000a64 <main+0x34>
    	} else {
    	    RGB_SetPWM(0, 255, 0); // Xanh lá
 8000b28:	2200      	movs	r2, #0
 8000b2a:	21ff      	movs	r1, #255	@ 0xff
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 f903 	bl	8000d38 <RGB_SetPWM>
    		lcd_set_cursor(0,0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe46 	bl	80007c6 <lcd_set_cursor>
    		lcd_send_string("Gas:");
 8000b3a:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <main+0x130>)
 8000b3c:	f7ff fe2e 	bl	800079c <lcd_send_string>
    		lcd_set_cursor(0,15);
 8000b40:	210f      	movs	r1, #15
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff fe3f 	bl	80007c6 <lcd_set_cursor>
    		lcd_send_string("0");
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <main+0x14c>)
 8000b4a:	f7ff fe27 	bl	800079c <lcd_send_string>
    	if (sys_state == SYS_ACTIVE) {
 8000b4e:	e789      	b.n	8000a64 <main+0x34>
 8000b50:	08001a80 	.word	0x08001a80
 8000b54:	20000004 	.word	0x20000004
 8000b58:	2000007c 	.word	0x2000007c
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	08001a9c 	.word	0x08001a9c
 8000b64:	08001aa4 	.word	0x08001aa4
 8000b68:	40012000 	.word	0x40012000
 8000b6c:	08001aa8 	.word	0x08001aa8
 8000b70:	08001ab8 	.word	0x08001ab8
 8000b74:	08001abc 	.word	0x08001abc
 8000b78:	08001ac4 	.word	0x08001ac4
 8000b7c:	08001ac8 	.word	0x08001ac8

08000b80 <delay>:
    while (1);
}



void delay(uint32_t ms) {
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    uint32_t start = millis;
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <delay+0x2c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
    while ((millis - start) < ms);
 8000b8e:	bf00      	nop
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <delay+0x2c>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d8f8      	bhi.n	8000b90 <delay+0x10>
}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	2000007c 	.word	0x2000007c

08000bb0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 0)) {
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <EXTI0_IRQHandler+0x3c>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d010      	beq.n	8000be2 <EXTI0_IRQHandler+0x32>
        EXTI->PR |= (1 << 0);
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <EXTI0_IRQHandler+0x3c>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <EXTI0_IRQHandler+0x3c>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6153      	str	r3, [r2, #20]
        if (sys_state){
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <EXTI0_IRQHandler+0x40>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <EXTI0_IRQHandler+0x2c>
        	sys_state = SYS_IDLE;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <EXTI0_IRQHandler+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
        }else{
        	sys_state = SYS_ACTIVE;
        }
    }
}
 8000bda:	e002      	b.n	8000be2 <EXTI0_IRQHandler+0x32>
        	sys_state = SYS_ACTIVE;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <EXTI0_IRQHandler+0x40>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40013c00 	.word	0x40013c00
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 1)) {
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <EXTI1_IRQHandler+0x24>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <EXTI1_IRQHandler+0x20>
        EXTI->PR |= (1 << 1); // Clear pending bit
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <EXTI1_IRQHandler+0x24>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a03      	ldr	r2, [pc, #12]	@ (8000c18 <EXTI1_IRQHandler+0x24>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	6153      	str	r3, [r2, #20]
        NVIC_SystemReset();
 8000c10:	f7ff fdf2 	bl	80007f8 <__NVIC_SystemReset>
    }
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40013c00 	.word	0x40013c00

08000c1c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <TIM4_IRQHandler+0x30>)
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d00a      	beq.n	8000c42 <TIM4_IRQHandler+0x26>
        TIM4->SR &= ~TIM_SR_UIF;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <TIM4_IRQHandler+0x30>)
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	4a06      	ldr	r2, [pc, #24]	@ (8000c4c <TIM4_IRQHandler+0x30>)
 8000c32:	f023 0301 	bic.w	r3, r3, #1
 8000c36:	6113      	str	r3, [r2, #16]
        millis++;
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <TIM4_IRQHandler+0x34>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <TIM4_IRQHandler+0x34>)
 8000c40:	6013      	str	r3, [r2, #0]
    }
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40000800 	.word	0x40000800
 8000c50:	2000007c 	.word	0x2000007c

08000c54 <RGB_PWM_Init>:

#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "rgb.h"
void RGB_PWM_Init(void) {
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000c58:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <RGB_PWM_Init+0xd8>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	4a33      	ldr	r2, [pc, #204]	@ (8000d2c <RGB_PWM_Init+0xd8>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN;
 8000c64:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <RGB_PWM_Init+0xd8>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	4a30      	ldr	r2, [pc, #192]	@ (8000d2c <RGB_PWM_Init+0xd8>)
 8000c6a:	f043 0303 	orr.w	r3, r3, #3
 8000c6e:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER &= ~((3 << (5*2)) | (3 << (6*2)) | (3 << (7*2)));
 8000c70:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <RGB_PWM_Init+0xdc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a2e      	ldr	r2, [pc, #184]	@ (8000d30 <RGB_PWM_Init+0xdc>)
 8000c76:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000c7a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2 << (5*2)) | (2 << (6*2)) | (2 << (7*2))); // AF mode
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <RGB_PWM_Init+0xdc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2b      	ldr	r2, [pc, #172]	@ (8000d30 <RGB_PWM_Init+0xdc>)
 8000c82:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000c86:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~((0xF << (5*4)) | (0xF << (6*4)) | (0xF << (7*4)));
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <RGB_PWM_Init+0xdc>)
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	4a28      	ldr	r2, [pc, #160]	@ (8000d30 <RGB_PWM_Init+0xdc>)
 8000c8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c92:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((1 << (5*4)) | (2 << (6*4)) | (2 << (7*4))); // AF1, AF2, AF2
 8000c94:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <RGB_PWM_Init+0xdc>)
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	4a25      	ldr	r2, [pc, #148]	@ (8000d30 <RGB_PWM_Init+0xdc>)
 8000c9a:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ca2:	6213      	str	r3, [r2, #32]

    // TIM2 - Red
    TIM2->PSC = 84 - 1;
 8000ca4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ca8:	2253      	movs	r2, #83	@ 0x53
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 255;
 8000cac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cb0:	22ff      	movs	r2, #255	@ 0xff
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 8000cb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cbe:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000cc2:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= TIM_CCER_CC1E;
 8000cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cc8:	6a1b      	ldr	r3, [r3, #32]
 8000cca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN;
 8000cd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cde:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 8000ce2:	6013      	str	r3, [r2, #0]

    // TIM3 - Green & Blue
    TIM3->PSC = 84 - 1;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000ce6:	2253      	movs	r2, #83	@ 0x53
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 255;
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000cec:	22ff      	movs	r2, #255	@ 0xff
 8000cee:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;       // CH1
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000cf6:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000cfa:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;      // CH2
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a0c      	ldr	r2, [pc, #48]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000d02:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000d06:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	4a09      	ldr	r2, [pc, #36]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000d0e:	f043 0311 	orr.w	r3, r3, #17
 8000d12:	6213      	str	r3, [r2, #32]
    TIM3->CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN;
 8000d14:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a06      	ldr	r2, [pc, #24]	@ (8000d34 <RGB_PWM_Init+0xe0>)
 8000d1a:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40000400 	.word	0x40000400

08000d38 <RGB_SetPWM>:

void RGB_SetPWM(uint8_t r, uint8_t g, uint8_t b) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	460b      	mov	r3, r1
 8000d44:	71bb      	strb	r3, [r7, #6]
 8000d46:	4613      	mov	r3, r2
 8000d48:	717b      	strb	r3, [r7, #5]
    // LED anode chung nên phải đảo
    TIM2->CCR1 = 255 - r;
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000d50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d54:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR1 = 255 - g;
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <RGB_SetPWM+0x40>)
 8000d5e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 255 - b;
 8000d60:	797b      	ldrb	r3, [r7, #5]
 8000d62:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000d66:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <RGB_SetPWM+0x40>)
 8000d68:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40000400 	.word	0x40000400

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 f963 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f000 f97a 	bl	8001104 <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20020000 	.word	0x20020000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	20000088 	.word	0x20000088
 8000e44:	200001d8 	.word	0x200001d8

08000e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllp, pllsource, pllm;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e72:	4b34      	ldr	r3, [pc, #208]	@ (8000f44 <SystemCoreClockUpdate+0xd8>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d011      	beq.n	8000ea6 <SystemCoreClockUpdate+0x3a>
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d844      	bhi.n	8000f12 <SystemCoreClockUpdate+0xa6>
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <SystemCoreClockUpdate+0x2a>
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d004      	beq.n	8000e9e <SystemCoreClockUpdate+0x32>
 8000e94:	e03d      	b.n	8000f12 <SystemCoreClockUpdate+0xa6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000e96:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <SystemCoreClockUpdate+0xdc>)
 8000e98:	4a2c      	ldr	r2, [pc, #176]	@ (8000f4c <SystemCoreClockUpdate+0xe0>)
 8000e9a:	601a      	str	r2, [r3, #0]
      break;
 8000e9c:	e03d      	b.n	8000f1a <SystemCoreClockUpdate+0xae>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f48 <SystemCoreClockUpdate+0xdc>)
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f50 <SystemCoreClockUpdate+0xe4>)
 8000ea2:	601a      	str	r2, [r3, #0]
      break;
 8000ea4:	e039      	b.n	8000f1a <SystemCoreClockUpdate+0xae>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <SystemCoreClockUpdate+0xd8>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	0d9b      	lsrs	r3, r3, #22
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <SystemCoreClockUpdate+0xd8>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000eba:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00c      	beq.n	8000edc <SystemCoreClockUpdate+0x70>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ec2:	4a23      	ldr	r2, [pc, #140]	@ (8000f50 <SystemCoreClockUpdate+0xe4>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <SystemCoreClockUpdate+0xd8>)
 8000ecc:	6852      	ldr	r2, [r2, #4]
 8000ece:	0992      	lsrs	r2, r2, #6
 8000ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e00b      	b.n	8000ef4 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000edc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f4c <SystemCoreClockUpdate+0xe0>)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <SystemCoreClockUpdate+0xd8>)
 8000ee6:	6852      	ldr	r2, [r2, #4]
 8000ee8:	0992      	lsrs	r2, r2, #6
 8000eea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <SystemCoreClockUpdate+0xd8>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	3301      	adds	r3, #1
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllp;
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f48 <SystemCoreClockUpdate+0xdc>)
 8000f0e:	6013      	str	r3, [r2, #0]
      break;
 8000f10:	e003      	b.n	8000f1a <SystemCoreClockUpdate+0xae>
    default:
      SystemCoreClock = HSI_VALUE;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <SystemCoreClockUpdate+0xdc>)
 8000f14:	4a0d      	ldr	r2, [pc, #52]	@ (8000f4c <SystemCoreClockUpdate+0xe0>)
 8000f16:	601a      	str	r2, [r3, #0]
      break;
 8000f18:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <SystemCoreClockUpdate+0xd8>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	4a0b      	ldr	r2, [pc, #44]	@ (8000f54 <SystemCoreClockUpdate+0xe8>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <SystemCoreClockUpdate+0xdc>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	fa22 f303 	lsr.w	r3, r2, r3
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <SystemCoreClockUpdate+0xdc>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40023800 	.word	0x40023800
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	00f42400 	.word	0x00f42400
 8000f50:	007a1200 	.word	0x007a1200
 8000f54:	08001acc 	.word	0x08001acc

08000f58 <USART2_Init>:
#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "uart.h"

void USART2_Init(void) {
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <USART2_Init+0x80>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd8 <USART2_Init+0x80>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <USART2_Init+0x80>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd8 <USART2_Init+0x80>)
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f72:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER &= ~(3 << 4);        // PA2
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <USART2_Init+0x84>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a18      	ldr	r2, [pc, #96]	@ (8000fdc <USART2_Init+0x84>)
 8000f7a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f7e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2 << 4);        // Alternate Function
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <USART2_Init+0x84>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a15      	ldr	r2, [pc, #84]	@ (8000fdc <USART2_Init+0x84>)
 8000f86:	f043 0320 	orr.w	r3, r3, #32
 8000f8a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << 8);     // Clear AF
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <USART2_Init+0x84>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <USART2_Init+0x84>)
 8000f92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f96:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (7 << 8);       // AF7 = USART2
 8000f98:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <USART2_Init+0x84>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <USART2_Init+0x84>)
 8000f9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000fa2:	6213      	str	r3, [r2, #32]

    USART2->BRR = SystemCoreClock / 9600;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <USART2_Init+0x88>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <USART2_Init+0x8c>)
 8000faa:	490f      	ldr	r1, [pc, #60]	@ (8000fe8 <USART2_Init+0x90>)
 8000fac:	fba1 1303 	umull	r1, r3, r1, r3
 8000fb0:	0a9b      	lsrs	r3, r3, #10
 8000fb2:	6093      	str	r3, [r2, #8]
    USART2->CR1 |= USART_CR1_TE;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <USART2_Init+0x8c>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <USART2_Init+0x8c>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= USART_CR1_UE;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <USART2_Init+0x8c>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <USART2_Init+0x8c>)
 8000fc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	1b4e81b5 	.word	0x1b4e81b5

08000fec <USART2_SendChar>:

void USART2_SendChar(char c) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));
 8000ff6:	bf00      	nop
 8000ff8:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <USART2_SendChar+0x2c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f9      	beq.n	8000ff8 <USART2_SendChar+0xc>
    USART2->DR = c;
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <USART2_SendChar+0x2c>)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	6053      	str	r3, [r2, #4]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40004400 	.word	0x40004400

0800101c <USART2_SendString>:

void USART2_SendString(const char *str) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001024:	e006      	b.n	8001034 <USART2_SendString+0x18>
        USART2_SendChar(*str++);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ffdc 	bl	8000fec <USART2_SendChar>
    while (*str) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f4      	bne.n	8001026 <USART2_SendString+0xa>
    }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001080 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104c:	f7ff fefc 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	@ (8001088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	@ (8001094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f000 f84b 	bl	8001110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fcd9 	bl	8000a30 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800108c:	08001b20 	.word	0x08001b20
  ldr r2, =_sbss
 8001090:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001094:	200001d8 	.word	0x200001d8

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	2000008c 	.word	0x2000008c

080010c4 <siprintf>:
 80010c4:	b40e      	push	{r1, r2, r3}
 80010c6:	b500      	push	{lr}
 80010c8:	b09c      	sub	sp, #112	@ 0x70
 80010ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80010cc:	9002      	str	r0, [sp, #8]
 80010ce:	9006      	str	r0, [sp, #24]
 80010d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <siprintf+0x38>)
 80010d6:	9107      	str	r1, [sp, #28]
 80010d8:	9104      	str	r1, [sp, #16]
 80010da:	4909      	ldr	r1, [pc, #36]	@ (8001100 <siprintf+0x3c>)
 80010dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80010e0:	9105      	str	r1, [sp, #20]
 80010e2:	6800      	ldr	r0, [r0, #0]
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	a902      	add	r1, sp, #8
 80010e8:	f000 f98c 	bl	8001404 <_svfiprintf_r>
 80010ec:	9b02      	ldr	r3, [sp, #8]
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
 80010f2:	b01c      	add	sp, #112	@ 0x70
 80010f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80010f8:	b003      	add	sp, #12
 80010fa:	4770      	bx	lr
 80010fc:	20000010 	.word	0x20000010
 8001100:	ffff0208 	.word	0xffff0208

08001104 <__errno>:
 8001104:	4b01      	ldr	r3, [pc, #4]	@ (800110c <__errno+0x8>)
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000010 	.word	0x20000010

08001110 <__libc_init_array>:
 8001110:	b570      	push	{r4, r5, r6, lr}
 8001112:	4d0d      	ldr	r5, [pc, #52]	@ (8001148 <__libc_init_array+0x38>)
 8001114:	4c0d      	ldr	r4, [pc, #52]	@ (800114c <__libc_init_array+0x3c>)
 8001116:	1b64      	subs	r4, r4, r5
 8001118:	10a4      	asrs	r4, r4, #2
 800111a:	2600      	movs	r6, #0
 800111c:	42a6      	cmp	r6, r4
 800111e:	d109      	bne.n	8001134 <__libc_init_array+0x24>
 8001120:	4d0b      	ldr	r5, [pc, #44]	@ (8001150 <__libc_init_array+0x40>)
 8001122:	4c0c      	ldr	r4, [pc, #48]	@ (8001154 <__libc_init_array+0x44>)
 8001124:	f000 fc66 	bl	80019f4 <_init>
 8001128:	1b64      	subs	r4, r4, r5
 800112a:	10a4      	asrs	r4, r4, #2
 800112c:	2600      	movs	r6, #0
 800112e:	42a6      	cmp	r6, r4
 8001130:	d105      	bne.n	800113e <__libc_init_array+0x2e>
 8001132:	bd70      	pop	{r4, r5, r6, pc}
 8001134:	f855 3b04 	ldr.w	r3, [r5], #4
 8001138:	4798      	blx	r3
 800113a:	3601      	adds	r6, #1
 800113c:	e7ee      	b.n	800111c <__libc_init_array+0xc>
 800113e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001142:	4798      	blx	r3
 8001144:	3601      	adds	r6, #1
 8001146:	e7f2      	b.n	800112e <__libc_init_array+0x1e>
 8001148:	08001b18 	.word	0x08001b18
 800114c:	08001b18 	.word	0x08001b18
 8001150:	08001b18 	.word	0x08001b18
 8001154:	08001b1c 	.word	0x08001b1c

08001158 <__retarget_lock_acquire_recursive>:
 8001158:	4770      	bx	lr

0800115a <__retarget_lock_release_recursive>:
 800115a:	4770      	bx	lr

0800115c <_free_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4605      	mov	r5, r0
 8001160:	2900      	cmp	r1, #0
 8001162:	d041      	beq.n	80011e8 <_free_r+0x8c>
 8001164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001168:	1f0c      	subs	r4, r1, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	bfb8      	it	lt
 800116e:	18e4      	addlt	r4, r4, r3
 8001170:	f000 f8e0 	bl	8001334 <__malloc_lock>
 8001174:	4a1d      	ldr	r2, [pc, #116]	@ (80011ec <_free_r+0x90>)
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	b933      	cbnz	r3, 8001188 <_free_r+0x2c>
 800117a:	6063      	str	r3, [r4, #4]
 800117c:	6014      	str	r4, [r2, #0]
 800117e:	4628      	mov	r0, r5
 8001180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001184:	f000 b8dc 	b.w	8001340 <__malloc_unlock>
 8001188:	42a3      	cmp	r3, r4
 800118a:	d908      	bls.n	800119e <_free_r+0x42>
 800118c:	6820      	ldr	r0, [r4, #0]
 800118e:	1821      	adds	r1, r4, r0
 8001190:	428b      	cmp	r3, r1
 8001192:	bf01      	itttt	eq
 8001194:	6819      	ldreq	r1, [r3, #0]
 8001196:	685b      	ldreq	r3, [r3, #4]
 8001198:	1809      	addeq	r1, r1, r0
 800119a:	6021      	streq	r1, [r4, #0]
 800119c:	e7ed      	b.n	800117a <_free_r+0x1e>
 800119e:	461a      	mov	r2, r3
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	b10b      	cbz	r3, 80011a8 <_free_r+0x4c>
 80011a4:	42a3      	cmp	r3, r4
 80011a6:	d9fa      	bls.n	800119e <_free_r+0x42>
 80011a8:	6811      	ldr	r1, [r2, #0]
 80011aa:	1850      	adds	r0, r2, r1
 80011ac:	42a0      	cmp	r0, r4
 80011ae:	d10b      	bne.n	80011c8 <_free_r+0x6c>
 80011b0:	6820      	ldr	r0, [r4, #0]
 80011b2:	4401      	add	r1, r0
 80011b4:	1850      	adds	r0, r2, r1
 80011b6:	4283      	cmp	r3, r0
 80011b8:	6011      	str	r1, [r2, #0]
 80011ba:	d1e0      	bne.n	800117e <_free_r+0x22>
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	6053      	str	r3, [r2, #4]
 80011c2:	4408      	add	r0, r1
 80011c4:	6010      	str	r0, [r2, #0]
 80011c6:	e7da      	b.n	800117e <_free_r+0x22>
 80011c8:	d902      	bls.n	80011d0 <_free_r+0x74>
 80011ca:	230c      	movs	r3, #12
 80011cc:	602b      	str	r3, [r5, #0]
 80011ce:	e7d6      	b.n	800117e <_free_r+0x22>
 80011d0:	6820      	ldr	r0, [r4, #0]
 80011d2:	1821      	adds	r1, r4, r0
 80011d4:	428b      	cmp	r3, r1
 80011d6:	bf04      	itt	eq
 80011d8:	6819      	ldreq	r1, [r3, #0]
 80011da:	685b      	ldreq	r3, [r3, #4]
 80011dc:	6063      	str	r3, [r4, #4]
 80011de:	bf04      	itt	eq
 80011e0:	1809      	addeq	r1, r1, r0
 80011e2:	6021      	streq	r1, [r4, #0]
 80011e4:	6054      	str	r4, [r2, #4]
 80011e6:	e7ca      	b.n	800117e <_free_r+0x22>
 80011e8:	bd38      	pop	{r3, r4, r5, pc}
 80011ea:	bf00      	nop
 80011ec:	200001d4 	.word	0x200001d4

080011f0 <sbrk_aligned>:
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	4e0f      	ldr	r6, [pc, #60]	@ (8001230 <sbrk_aligned+0x40>)
 80011f4:	460c      	mov	r4, r1
 80011f6:	6831      	ldr	r1, [r6, #0]
 80011f8:	4605      	mov	r5, r0
 80011fa:	b911      	cbnz	r1, 8001202 <sbrk_aligned+0x12>
 80011fc:	f000 fba6 	bl	800194c <_sbrk_r>
 8001200:	6030      	str	r0, [r6, #0]
 8001202:	4621      	mov	r1, r4
 8001204:	4628      	mov	r0, r5
 8001206:	f000 fba1 	bl	800194c <_sbrk_r>
 800120a:	1c43      	adds	r3, r0, #1
 800120c:	d103      	bne.n	8001216 <sbrk_aligned+0x26>
 800120e:	f04f 34ff 	mov.w	r4, #4294967295
 8001212:	4620      	mov	r0, r4
 8001214:	bd70      	pop	{r4, r5, r6, pc}
 8001216:	1cc4      	adds	r4, r0, #3
 8001218:	f024 0403 	bic.w	r4, r4, #3
 800121c:	42a0      	cmp	r0, r4
 800121e:	d0f8      	beq.n	8001212 <sbrk_aligned+0x22>
 8001220:	1a21      	subs	r1, r4, r0
 8001222:	4628      	mov	r0, r5
 8001224:	f000 fb92 	bl	800194c <_sbrk_r>
 8001228:	3001      	adds	r0, #1
 800122a:	d1f2      	bne.n	8001212 <sbrk_aligned+0x22>
 800122c:	e7ef      	b.n	800120e <sbrk_aligned+0x1e>
 800122e:	bf00      	nop
 8001230:	200001d0 	.word	0x200001d0

08001234 <_malloc_r>:
 8001234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001238:	1ccd      	adds	r5, r1, #3
 800123a:	f025 0503 	bic.w	r5, r5, #3
 800123e:	3508      	adds	r5, #8
 8001240:	2d0c      	cmp	r5, #12
 8001242:	bf38      	it	cc
 8001244:	250c      	movcc	r5, #12
 8001246:	2d00      	cmp	r5, #0
 8001248:	4606      	mov	r6, r0
 800124a:	db01      	blt.n	8001250 <_malloc_r+0x1c>
 800124c:	42a9      	cmp	r1, r5
 800124e:	d904      	bls.n	800125a <_malloc_r+0x26>
 8001250:	230c      	movs	r3, #12
 8001252:	6033      	str	r3, [r6, #0]
 8001254:	2000      	movs	r0, #0
 8001256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800125a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001330 <_malloc_r+0xfc>
 800125e:	f000 f869 	bl	8001334 <__malloc_lock>
 8001262:	f8d8 3000 	ldr.w	r3, [r8]
 8001266:	461c      	mov	r4, r3
 8001268:	bb44      	cbnz	r4, 80012bc <_malloc_r+0x88>
 800126a:	4629      	mov	r1, r5
 800126c:	4630      	mov	r0, r6
 800126e:	f7ff ffbf 	bl	80011f0 <sbrk_aligned>
 8001272:	1c43      	adds	r3, r0, #1
 8001274:	4604      	mov	r4, r0
 8001276:	d158      	bne.n	800132a <_malloc_r+0xf6>
 8001278:	f8d8 4000 	ldr.w	r4, [r8]
 800127c:	4627      	mov	r7, r4
 800127e:	2f00      	cmp	r7, #0
 8001280:	d143      	bne.n	800130a <_malloc_r+0xd6>
 8001282:	2c00      	cmp	r4, #0
 8001284:	d04b      	beq.n	800131e <_malloc_r+0xea>
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	4639      	mov	r1, r7
 800128a:	4630      	mov	r0, r6
 800128c:	eb04 0903 	add.w	r9, r4, r3
 8001290:	f000 fb5c 	bl	800194c <_sbrk_r>
 8001294:	4581      	cmp	r9, r0
 8001296:	d142      	bne.n	800131e <_malloc_r+0xea>
 8001298:	6821      	ldr	r1, [r4, #0]
 800129a:	1a6d      	subs	r5, r5, r1
 800129c:	4629      	mov	r1, r5
 800129e:	4630      	mov	r0, r6
 80012a0:	f7ff ffa6 	bl	80011f0 <sbrk_aligned>
 80012a4:	3001      	adds	r0, #1
 80012a6:	d03a      	beq.n	800131e <_malloc_r+0xea>
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	442b      	add	r3, r5
 80012ac:	6023      	str	r3, [r4, #0]
 80012ae:	f8d8 3000 	ldr.w	r3, [r8]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	bb62      	cbnz	r2, 8001310 <_malloc_r+0xdc>
 80012b6:	f8c8 7000 	str.w	r7, [r8]
 80012ba:	e00f      	b.n	80012dc <_malloc_r+0xa8>
 80012bc:	6822      	ldr	r2, [r4, #0]
 80012be:	1b52      	subs	r2, r2, r5
 80012c0:	d420      	bmi.n	8001304 <_malloc_r+0xd0>
 80012c2:	2a0b      	cmp	r2, #11
 80012c4:	d917      	bls.n	80012f6 <_malloc_r+0xc2>
 80012c6:	1961      	adds	r1, r4, r5
 80012c8:	42a3      	cmp	r3, r4
 80012ca:	6025      	str	r5, [r4, #0]
 80012cc:	bf18      	it	ne
 80012ce:	6059      	strne	r1, [r3, #4]
 80012d0:	6863      	ldr	r3, [r4, #4]
 80012d2:	bf08      	it	eq
 80012d4:	f8c8 1000 	streq.w	r1, [r8]
 80012d8:	5162      	str	r2, [r4, r5]
 80012da:	604b      	str	r3, [r1, #4]
 80012dc:	4630      	mov	r0, r6
 80012de:	f000 f82f 	bl	8001340 <__malloc_unlock>
 80012e2:	f104 000b 	add.w	r0, r4, #11
 80012e6:	1d23      	adds	r3, r4, #4
 80012e8:	f020 0007 	bic.w	r0, r0, #7
 80012ec:	1ac2      	subs	r2, r0, r3
 80012ee:	bf1c      	itt	ne
 80012f0:	1a1b      	subne	r3, r3, r0
 80012f2:	50a3      	strne	r3, [r4, r2]
 80012f4:	e7af      	b.n	8001256 <_malloc_r+0x22>
 80012f6:	6862      	ldr	r2, [r4, #4]
 80012f8:	42a3      	cmp	r3, r4
 80012fa:	bf0c      	ite	eq
 80012fc:	f8c8 2000 	streq.w	r2, [r8]
 8001300:	605a      	strne	r2, [r3, #4]
 8001302:	e7eb      	b.n	80012dc <_malloc_r+0xa8>
 8001304:	4623      	mov	r3, r4
 8001306:	6864      	ldr	r4, [r4, #4]
 8001308:	e7ae      	b.n	8001268 <_malloc_r+0x34>
 800130a:	463c      	mov	r4, r7
 800130c:	687f      	ldr	r7, [r7, #4]
 800130e:	e7b6      	b.n	800127e <_malloc_r+0x4a>
 8001310:	461a      	mov	r2, r3
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	42a3      	cmp	r3, r4
 8001316:	d1fb      	bne.n	8001310 <_malloc_r+0xdc>
 8001318:	2300      	movs	r3, #0
 800131a:	6053      	str	r3, [r2, #4]
 800131c:	e7de      	b.n	80012dc <_malloc_r+0xa8>
 800131e:	230c      	movs	r3, #12
 8001320:	6033      	str	r3, [r6, #0]
 8001322:	4630      	mov	r0, r6
 8001324:	f000 f80c 	bl	8001340 <__malloc_unlock>
 8001328:	e794      	b.n	8001254 <_malloc_r+0x20>
 800132a:	6005      	str	r5, [r0, #0]
 800132c:	e7d6      	b.n	80012dc <_malloc_r+0xa8>
 800132e:	bf00      	nop
 8001330:	200001d4 	.word	0x200001d4

08001334 <__malloc_lock>:
 8001334:	4801      	ldr	r0, [pc, #4]	@ (800133c <__malloc_lock+0x8>)
 8001336:	f7ff bf0f 	b.w	8001158 <__retarget_lock_acquire_recursive>
 800133a:	bf00      	nop
 800133c:	200001cc 	.word	0x200001cc

08001340 <__malloc_unlock>:
 8001340:	4801      	ldr	r0, [pc, #4]	@ (8001348 <__malloc_unlock+0x8>)
 8001342:	f7ff bf0a 	b.w	800115a <__retarget_lock_release_recursive>
 8001346:	bf00      	nop
 8001348:	200001cc 	.word	0x200001cc

0800134c <__ssputs_r>:
 800134c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001350:	688e      	ldr	r6, [r1, #8]
 8001352:	461f      	mov	r7, r3
 8001354:	42be      	cmp	r6, r7
 8001356:	680b      	ldr	r3, [r1, #0]
 8001358:	4682      	mov	sl, r0
 800135a:	460c      	mov	r4, r1
 800135c:	4690      	mov	r8, r2
 800135e:	d82d      	bhi.n	80013bc <__ssputs_r+0x70>
 8001360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001364:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001368:	d026      	beq.n	80013b8 <__ssputs_r+0x6c>
 800136a:	6965      	ldr	r5, [r4, #20]
 800136c:	6909      	ldr	r1, [r1, #16]
 800136e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001372:	eba3 0901 	sub.w	r9, r3, r1
 8001376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800137a:	1c7b      	adds	r3, r7, #1
 800137c:	444b      	add	r3, r9
 800137e:	106d      	asrs	r5, r5, #1
 8001380:	429d      	cmp	r5, r3
 8001382:	bf38      	it	cc
 8001384:	461d      	movcc	r5, r3
 8001386:	0553      	lsls	r3, r2, #21
 8001388:	d527      	bpl.n	80013da <__ssputs_r+0x8e>
 800138a:	4629      	mov	r1, r5
 800138c:	f7ff ff52 	bl	8001234 <_malloc_r>
 8001390:	4606      	mov	r6, r0
 8001392:	b360      	cbz	r0, 80013ee <__ssputs_r+0xa2>
 8001394:	6921      	ldr	r1, [r4, #16]
 8001396:	464a      	mov	r2, r9
 8001398:	f000 fae8 	bl	800196c <memcpy>
 800139c:	89a3      	ldrh	r3, [r4, #12]
 800139e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80013a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013a6:	81a3      	strh	r3, [r4, #12]
 80013a8:	6126      	str	r6, [r4, #16]
 80013aa:	6165      	str	r5, [r4, #20]
 80013ac:	444e      	add	r6, r9
 80013ae:	eba5 0509 	sub.w	r5, r5, r9
 80013b2:	6026      	str	r6, [r4, #0]
 80013b4:	60a5      	str	r5, [r4, #8]
 80013b6:	463e      	mov	r6, r7
 80013b8:	42be      	cmp	r6, r7
 80013ba:	d900      	bls.n	80013be <__ssputs_r+0x72>
 80013bc:	463e      	mov	r6, r7
 80013be:	6820      	ldr	r0, [r4, #0]
 80013c0:	4632      	mov	r2, r6
 80013c2:	4641      	mov	r1, r8
 80013c4:	f000 faa8 	bl	8001918 <memmove>
 80013c8:	68a3      	ldr	r3, [r4, #8]
 80013ca:	1b9b      	subs	r3, r3, r6
 80013cc:	60a3      	str	r3, [r4, #8]
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	4433      	add	r3, r6
 80013d2:	6023      	str	r3, [r4, #0]
 80013d4:	2000      	movs	r0, #0
 80013d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013da:	462a      	mov	r2, r5
 80013dc:	f000 fad4 	bl	8001988 <_realloc_r>
 80013e0:	4606      	mov	r6, r0
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d1e0      	bne.n	80013a8 <__ssputs_r+0x5c>
 80013e6:	6921      	ldr	r1, [r4, #16]
 80013e8:	4650      	mov	r0, sl
 80013ea:	f7ff feb7 	bl	800115c <_free_r>
 80013ee:	230c      	movs	r3, #12
 80013f0:	f8ca 3000 	str.w	r3, [sl]
 80013f4:	89a3      	ldrh	r3, [r4, #12]
 80013f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fa:	81a3      	strh	r3, [r4, #12]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	e7e9      	b.n	80013d6 <__ssputs_r+0x8a>
	...

08001404 <_svfiprintf_r>:
 8001404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001408:	4698      	mov	r8, r3
 800140a:	898b      	ldrh	r3, [r1, #12]
 800140c:	061b      	lsls	r3, r3, #24
 800140e:	b09d      	sub	sp, #116	@ 0x74
 8001410:	4607      	mov	r7, r0
 8001412:	460d      	mov	r5, r1
 8001414:	4614      	mov	r4, r2
 8001416:	d510      	bpl.n	800143a <_svfiprintf_r+0x36>
 8001418:	690b      	ldr	r3, [r1, #16]
 800141a:	b973      	cbnz	r3, 800143a <_svfiprintf_r+0x36>
 800141c:	2140      	movs	r1, #64	@ 0x40
 800141e:	f7ff ff09 	bl	8001234 <_malloc_r>
 8001422:	6028      	str	r0, [r5, #0]
 8001424:	6128      	str	r0, [r5, #16]
 8001426:	b930      	cbnz	r0, 8001436 <_svfiprintf_r+0x32>
 8001428:	230c      	movs	r3, #12
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	b01d      	add	sp, #116	@ 0x74
 8001432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001436:	2340      	movs	r3, #64	@ 0x40
 8001438:	616b      	str	r3, [r5, #20]
 800143a:	2300      	movs	r3, #0
 800143c:	9309      	str	r3, [sp, #36]	@ 0x24
 800143e:	2320      	movs	r3, #32
 8001440:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001444:	f8cd 800c 	str.w	r8, [sp, #12]
 8001448:	2330      	movs	r3, #48	@ 0x30
 800144a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80015e8 <_svfiprintf_r+0x1e4>
 800144e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001452:	f04f 0901 	mov.w	r9, #1
 8001456:	4623      	mov	r3, r4
 8001458:	469a      	mov	sl, r3
 800145a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800145e:	b10a      	cbz	r2, 8001464 <_svfiprintf_r+0x60>
 8001460:	2a25      	cmp	r2, #37	@ 0x25
 8001462:	d1f9      	bne.n	8001458 <_svfiprintf_r+0x54>
 8001464:	ebba 0b04 	subs.w	fp, sl, r4
 8001468:	d00b      	beq.n	8001482 <_svfiprintf_r+0x7e>
 800146a:	465b      	mov	r3, fp
 800146c:	4622      	mov	r2, r4
 800146e:	4629      	mov	r1, r5
 8001470:	4638      	mov	r0, r7
 8001472:	f7ff ff6b 	bl	800134c <__ssputs_r>
 8001476:	3001      	adds	r0, #1
 8001478:	f000 80a7 	beq.w	80015ca <_svfiprintf_r+0x1c6>
 800147c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800147e:	445a      	add	r2, fp
 8001480:	9209      	str	r2, [sp, #36]	@ 0x24
 8001482:	f89a 3000 	ldrb.w	r3, [sl]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 809f 	beq.w	80015ca <_svfiprintf_r+0x1c6>
 800148c:	2300      	movs	r3, #0
 800148e:	f04f 32ff 	mov.w	r2, #4294967295
 8001492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001496:	f10a 0a01 	add.w	sl, sl, #1
 800149a:	9304      	str	r3, [sp, #16]
 800149c:	9307      	str	r3, [sp, #28]
 800149e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80014a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80014a4:	4654      	mov	r4, sl
 80014a6:	2205      	movs	r2, #5
 80014a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ac:	484e      	ldr	r0, [pc, #312]	@ (80015e8 <_svfiprintf_r+0x1e4>)
 80014ae:	f7fe fe97 	bl	80001e0 <memchr>
 80014b2:	9a04      	ldr	r2, [sp, #16]
 80014b4:	b9d8      	cbnz	r0, 80014ee <_svfiprintf_r+0xea>
 80014b6:	06d0      	lsls	r0, r2, #27
 80014b8:	bf44      	itt	mi
 80014ba:	2320      	movmi	r3, #32
 80014bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80014c0:	0711      	lsls	r1, r2, #28
 80014c2:	bf44      	itt	mi
 80014c4:	232b      	movmi	r3, #43	@ 0x2b
 80014c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80014ca:	f89a 3000 	ldrb.w	r3, [sl]
 80014ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80014d0:	d015      	beq.n	80014fe <_svfiprintf_r+0xfa>
 80014d2:	9a07      	ldr	r2, [sp, #28]
 80014d4:	4654      	mov	r4, sl
 80014d6:	2000      	movs	r0, #0
 80014d8:	f04f 0c0a 	mov.w	ip, #10
 80014dc:	4621      	mov	r1, r4
 80014de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014e2:	3b30      	subs	r3, #48	@ 0x30
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	d94b      	bls.n	8001580 <_svfiprintf_r+0x17c>
 80014e8:	b1b0      	cbz	r0, 8001518 <_svfiprintf_r+0x114>
 80014ea:	9207      	str	r2, [sp, #28]
 80014ec:	e014      	b.n	8001518 <_svfiprintf_r+0x114>
 80014ee:	eba0 0308 	sub.w	r3, r0, r8
 80014f2:	fa09 f303 	lsl.w	r3, r9, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	9304      	str	r3, [sp, #16]
 80014fa:	46a2      	mov	sl, r4
 80014fc:	e7d2      	b.n	80014a4 <_svfiprintf_r+0xa0>
 80014fe:	9b03      	ldr	r3, [sp, #12]
 8001500:	1d19      	adds	r1, r3, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	9103      	str	r1, [sp, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	bfbb      	ittet	lt
 800150a:	425b      	neglt	r3, r3
 800150c:	f042 0202 	orrlt.w	r2, r2, #2
 8001510:	9307      	strge	r3, [sp, #28]
 8001512:	9307      	strlt	r3, [sp, #28]
 8001514:	bfb8      	it	lt
 8001516:	9204      	strlt	r2, [sp, #16]
 8001518:	7823      	ldrb	r3, [r4, #0]
 800151a:	2b2e      	cmp	r3, #46	@ 0x2e
 800151c:	d10a      	bne.n	8001534 <_svfiprintf_r+0x130>
 800151e:	7863      	ldrb	r3, [r4, #1]
 8001520:	2b2a      	cmp	r3, #42	@ 0x2a
 8001522:	d132      	bne.n	800158a <_svfiprintf_r+0x186>
 8001524:	9b03      	ldr	r3, [sp, #12]
 8001526:	1d1a      	adds	r2, r3, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	9203      	str	r2, [sp, #12]
 800152c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001530:	3402      	adds	r4, #2
 8001532:	9305      	str	r3, [sp, #20]
 8001534:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80015f8 <_svfiprintf_r+0x1f4>
 8001538:	7821      	ldrb	r1, [r4, #0]
 800153a:	2203      	movs	r2, #3
 800153c:	4650      	mov	r0, sl
 800153e:	f7fe fe4f 	bl	80001e0 <memchr>
 8001542:	b138      	cbz	r0, 8001554 <_svfiprintf_r+0x150>
 8001544:	9b04      	ldr	r3, [sp, #16]
 8001546:	eba0 000a 	sub.w	r0, r0, sl
 800154a:	2240      	movs	r2, #64	@ 0x40
 800154c:	4082      	lsls	r2, r0
 800154e:	4313      	orrs	r3, r2
 8001550:	3401      	adds	r4, #1
 8001552:	9304      	str	r3, [sp, #16]
 8001554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001558:	4824      	ldr	r0, [pc, #144]	@ (80015ec <_svfiprintf_r+0x1e8>)
 800155a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800155e:	2206      	movs	r2, #6
 8001560:	f7fe fe3e 	bl	80001e0 <memchr>
 8001564:	2800      	cmp	r0, #0
 8001566:	d036      	beq.n	80015d6 <_svfiprintf_r+0x1d2>
 8001568:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <_svfiprintf_r+0x1ec>)
 800156a:	bb1b      	cbnz	r3, 80015b4 <_svfiprintf_r+0x1b0>
 800156c:	9b03      	ldr	r3, [sp, #12]
 800156e:	3307      	adds	r3, #7
 8001570:	f023 0307 	bic.w	r3, r3, #7
 8001574:	3308      	adds	r3, #8
 8001576:	9303      	str	r3, [sp, #12]
 8001578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800157a:	4433      	add	r3, r6
 800157c:	9309      	str	r3, [sp, #36]	@ 0x24
 800157e:	e76a      	b.n	8001456 <_svfiprintf_r+0x52>
 8001580:	fb0c 3202 	mla	r2, ip, r2, r3
 8001584:	460c      	mov	r4, r1
 8001586:	2001      	movs	r0, #1
 8001588:	e7a8      	b.n	80014dc <_svfiprintf_r+0xd8>
 800158a:	2300      	movs	r3, #0
 800158c:	3401      	adds	r4, #1
 800158e:	9305      	str	r3, [sp, #20]
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 0c0a 	mov.w	ip, #10
 8001596:	4620      	mov	r0, r4
 8001598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800159c:	3a30      	subs	r2, #48	@ 0x30
 800159e:	2a09      	cmp	r2, #9
 80015a0:	d903      	bls.n	80015aa <_svfiprintf_r+0x1a6>
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0c6      	beq.n	8001534 <_svfiprintf_r+0x130>
 80015a6:	9105      	str	r1, [sp, #20]
 80015a8:	e7c4      	b.n	8001534 <_svfiprintf_r+0x130>
 80015aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80015ae:	4604      	mov	r4, r0
 80015b0:	2301      	movs	r3, #1
 80015b2:	e7f0      	b.n	8001596 <_svfiprintf_r+0x192>
 80015b4:	ab03      	add	r3, sp, #12
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	462a      	mov	r2, r5
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <_svfiprintf_r+0x1f0>)
 80015bc:	a904      	add	r1, sp, #16
 80015be:	4638      	mov	r0, r7
 80015c0:	f3af 8000 	nop.w
 80015c4:	1c42      	adds	r2, r0, #1
 80015c6:	4606      	mov	r6, r0
 80015c8:	d1d6      	bne.n	8001578 <_svfiprintf_r+0x174>
 80015ca:	89ab      	ldrh	r3, [r5, #12]
 80015cc:	065b      	lsls	r3, r3, #25
 80015ce:	f53f af2d 	bmi.w	800142c <_svfiprintf_r+0x28>
 80015d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80015d4:	e72c      	b.n	8001430 <_svfiprintf_r+0x2c>
 80015d6:	ab03      	add	r3, sp, #12
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	462a      	mov	r2, r5
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <_svfiprintf_r+0x1f0>)
 80015de:	a904      	add	r1, sp, #16
 80015e0:	4638      	mov	r0, r7
 80015e2:	f000 f879 	bl	80016d8 <_printf_i>
 80015e6:	e7ed      	b.n	80015c4 <_svfiprintf_r+0x1c0>
 80015e8:	08001adc 	.word	0x08001adc
 80015ec:	08001ae6 	.word	0x08001ae6
 80015f0:	00000000 	.word	0x00000000
 80015f4:	0800134d 	.word	0x0800134d
 80015f8:	08001ae2 	.word	0x08001ae2

080015fc <_printf_common>:
 80015fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001600:	4616      	mov	r6, r2
 8001602:	4698      	mov	r8, r3
 8001604:	688a      	ldr	r2, [r1, #8]
 8001606:	690b      	ldr	r3, [r1, #16]
 8001608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800160c:	4293      	cmp	r3, r2
 800160e:	bfb8      	it	lt
 8001610:	4613      	movlt	r3, r2
 8001612:	6033      	str	r3, [r6, #0]
 8001614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001618:	4607      	mov	r7, r0
 800161a:	460c      	mov	r4, r1
 800161c:	b10a      	cbz	r2, 8001622 <_printf_common+0x26>
 800161e:	3301      	adds	r3, #1
 8001620:	6033      	str	r3, [r6, #0]
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	0699      	lsls	r1, r3, #26
 8001626:	bf42      	ittt	mi
 8001628:	6833      	ldrmi	r3, [r6, #0]
 800162a:	3302      	addmi	r3, #2
 800162c:	6033      	strmi	r3, [r6, #0]
 800162e:	6825      	ldr	r5, [r4, #0]
 8001630:	f015 0506 	ands.w	r5, r5, #6
 8001634:	d106      	bne.n	8001644 <_printf_common+0x48>
 8001636:	f104 0a19 	add.w	sl, r4, #25
 800163a:	68e3      	ldr	r3, [r4, #12]
 800163c:	6832      	ldr	r2, [r6, #0]
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	42ab      	cmp	r3, r5
 8001642:	dc26      	bgt.n	8001692 <_printf_common+0x96>
 8001644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001648:	6822      	ldr	r2, [r4, #0]
 800164a:	3b00      	subs	r3, #0
 800164c:	bf18      	it	ne
 800164e:	2301      	movne	r3, #1
 8001650:	0692      	lsls	r2, r2, #26
 8001652:	d42b      	bmi.n	80016ac <_printf_common+0xb0>
 8001654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001658:	4641      	mov	r1, r8
 800165a:	4638      	mov	r0, r7
 800165c:	47c8      	blx	r9
 800165e:	3001      	adds	r0, #1
 8001660:	d01e      	beq.n	80016a0 <_printf_common+0xa4>
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	6922      	ldr	r2, [r4, #16]
 8001666:	f003 0306 	and.w	r3, r3, #6
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf02      	ittt	eq
 800166e:	68e5      	ldreq	r5, [r4, #12]
 8001670:	6833      	ldreq	r3, [r6, #0]
 8001672:	1aed      	subeq	r5, r5, r3
 8001674:	68a3      	ldr	r3, [r4, #8]
 8001676:	bf0c      	ite	eq
 8001678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800167c:	2500      	movne	r5, #0
 800167e:	4293      	cmp	r3, r2
 8001680:	bfc4      	itt	gt
 8001682:	1a9b      	subgt	r3, r3, r2
 8001684:	18ed      	addgt	r5, r5, r3
 8001686:	2600      	movs	r6, #0
 8001688:	341a      	adds	r4, #26
 800168a:	42b5      	cmp	r5, r6
 800168c:	d11a      	bne.n	80016c4 <_printf_common+0xc8>
 800168e:	2000      	movs	r0, #0
 8001690:	e008      	b.n	80016a4 <_printf_common+0xa8>
 8001692:	2301      	movs	r3, #1
 8001694:	4652      	mov	r2, sl
 8001696:	4641      	mov	r1, r8
 8001698:	4638      	mov	r0, r7
 800169a:	47c8      	blx	r9
 800169c:	3001      	adds	r0, #1
 800169e:	d103      	bne.n	80016a8 <_printf_common+0xac>
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016a8:	3501      	adds	r5, #1
 80016aa:	e7c6      	b.n	800163a <_printf_common+0x3e>
 80016ac:	18e1      	adds	r1, r4, r3
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	2030      	movs	r0, #48	@ 0x30
 80016b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80016b6:	4422      	add	r2, r4
 80016b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80016bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80016c0:	3302      	adds	r3, #2
 80016c2:	e7c7      	b.n	8001654 <_printf_common+0x58>
 80016c4:	2301      	movs	r3, #1
 80016c6:	4622      	mov	r2, r4
 80016c8:	4641      	mov	r1, r8
 80016ca:	4638      	mov	r0, r7
 80016cc:	47c8      	blx	r9
 80016ce:	3001      	adds	r0, #1
 80016d0:	d0e6      	beq.n	80016a0 <_printf_common+0xa4>
 80016d2:	3601      	adds	r6, #1
 80016d4:	e7d9      	b.n	800168a <_printf_common+0x8e>
	...

080016d8 <_printf_i>:
 80016d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016dc:	7e0f      	ldrb	r7, [r1, #24]
 80016de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80016e0:	2f78      	cmp	r7, #120	@ 0x78
 80016e2:	4691      	mov	r9, r2
 80016e4:	4680      	mov	r8, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	469a      	mov	sl, r3
 80016ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80016ee:	d807      	bhi.n	8001700 <_printf_i+0x28>
 80016f0:	2f62      	cmp	r7, #98	@ 0x62
 80016f2:	d80a      	bhi.n	800170a <_printf_i+0x32>
 80016f4:	2f00      	cmp	r7, #0
 80016f6:	f000 80d2 	beq.w	800189e <_printf_i+0x1c6>
 80016fa:	2f58      	cmp	r7, #88	@ 0x58
 80016fc:	f000 80b9 	beq.w	8001872 <_printf_i+0x19a>
 8001700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001708:	e03a      	b.n	8001780 <_printf_i+0xa8>
 800170a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800170e:	2b15      	cmp	r3, #21
 8001710:	d8f6      	bhi.n	8001700 <_printf_i+0x28>
 8001712:	a101      	add	r1, pc, #4	@ (adr r1, 8001718 <_printf_i+0x40>)
 8001714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001718:	08001771 	.word	0x08001771
 800171c:	08001785 	.word	0x08001785
 8001720:	08001701 	.word	0x08001701
 8001724:	08001701 	.word	0x08001701
 8001728:	08001701 	.word	0x08001701
 800172c:	08001701 	.word	0x08001701
 8001730:	08001785 	.word	0x08001785
 8001734:	08001701 	.word	0x08001701
 8001738:	08001701 	.word	0x08001701
 800173c:	08001701 	.word	0x08001701
 8001740:	08001701 	.word	0x08001701
 8001744:	08001885 	.word	0x08001885
 8001748:	080017af 	.word	0x080017af
 800174c:	0800183f 	.word	0x0800183f
 8001750:	08001701 	.word	0x08001701
 8001754:	08001701 	.word	0x08001701
 8001758:	080018a7 	.word	0x080018a7
 800175c:	08001701 	.word	0x08001701
 8001760:	080017af 	.word	0x080017af
 8001764:	08001701 	.word	0x08001701
 8001768:	08001701 	.word	0x08001701
 800176c:	08001847 	.word	0x08001847
 8001770:	6833      	ldr	r3, [r6, #0]
 8001772:	1d1a      	adds	r2, r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6032      	str	r2, [r6, #0]
 8001778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800177c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001780:	2301      	movs	r3, #1
 8001782:	e09d      	b.n	80018c0 <_printf_i+0x1e8>
 8001784:	6833      	ldr	r3, [r6, #0]
 8001786:	6820      	ldr	r0, [r4, #0]
 8001788:	1d19      	adds	r1, r3, #4
 800178a:	6031      	str	r1, [r6, #0]
 800178c:	0606      	lsls	r6, r0, #24
 800178e:	d501      	bpl.n	8001794 <_printf_i+0xbc>
 8001790:	681d      	ldr	r5, [r3, #0]
 8001792:	e003      	b.n	800179c <_printf_i+0xc4>
 8001794:	0645      	lsls	r5, r0, #25
 8001796:	d5fb      	bpl.n	8001790 <_printf_i+0xb8>
 8001798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800179c:	2d00      	cmp	r5, #0
 800179e:	da03      	bge.n	80017a8 <_printf_i+0xd0>
 80017a0:	232d      	movs	r3, #45	@ 0x2d
 80017a2:	426d      	negs	r5, r5
 80017a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017a8:	4859      	ldr	r0, [pc, #356]	@ (8001910 <_printf_i+0x238>)
 80017aa:	230a      	movs	r3, #10
 80017ac:	e011      	b.n	80017d2 <_printf_i+0xfa>
 80017ae:	6821      	ldr	r1, [r4, #0]
 80017b0:	6833      	ldr	r3, [r6, #0]
 80017b2:	0608      	lsls	r0, r1, #24
 80017b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80017b8:	d402      	bmi.n	80017c0 <_printf_i+0xe8>
 80017ba:	0649      	lsls	r1, r1, #25
 80017bc:	bf48      	it	mi
 80017be:	b2ad      	uxthmi	r5, r5
 80017c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80017c2:	4853      	ldr	r0, [pc, #332]	@ (8001910 <_printf_i+0x238>)
 80017c4:	6033      	str	r3, [r6, #0]
 80017c6:	bf14      	ite	ne
 80017c8:	230a      	movne	r3, #10
 80017ca:	2308      	moveq	r3, #8
 80017cc:	2100      	movs	r1, #0
 80017ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80017d2:	6866      	ldr	r6, [r4, #4]
 80017d4:	60a6      	str	r6, [r4, #8]
 80017d6:	2e00      	cmp	r6, #0
 80017d8:	bfa2      	ittt	ge
 80017da:	6821      	ldrge	r1, [r4, #0]
 80017dc:	f021 0104 	bicge.w	r1, r1, #4
 80017e0:	6021      	strge	r1, [r4, #0]
 80017e2:	b90d      	cbnz	r5, 80017e8 <_printf_i+0x110>
 80017e4:	2e00      	cmp	r6, #0
 80017e6:	d04b      	beq.n	8001880 <_printf_i+0x1a8>
 80017e8:	4616      	mov	r6, r2
 80017ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80017ee:	fb03 5711 	mls	r7, r3, r1, r5
 80017f2:	5dc7      	ldrb	r7, [r0, r7]
 80017f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80017f8:	462f      	mov	r7, r5
 80017fa:	42bb      	cmp	r3, r7
 80017fc:	460d      	mov	r5, r1
 80017fe:	d9f4      	bls.n	80017ea <_printf_i+0x112>
 8001800:	2b08      	cmp	r3, #8
 8001802:	d10b      	bne.n	800181c <_printf_i+0x144>
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	07df      	lsls	r7, r3, #31
 8001808:	d508      	bpl.n	800181c <_printf_i+0x144>
 800180a:	6923      	ldr	r3, [r4, #16]
 800180c:	6861      	ldr	r1, [r4, #4]
 800180e:	4299      	cmp	r1, r3
 8001810:	bfde      	ittt	le
 8001812:	2330      	movle	r3, #48	@ 0x30
 8001814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800181c:	1b92      	subs	r2, r2, r6
 800181e:	6122      	str	r2, [r4, #16]
 8001820:	f8cd a000 	str.w	sl, [sp]
 8001824:	464b      	mov	r3, r9
 8001826:	aa03      	add	r2, sp, #12
 8001828:	4621      	mov	r1, r4
 800182a:	4640      	mov	r0, r8
 800182c:	f7ff fee6 	bl	80015fc <_printf_common>
 8001830:	3001      	adds	r0, #1
 8001832:	d14a      	bne.n	80018ca <_printf_i+0x1f2>
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	b004      	add	sp, #16
 800183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	6023      	str	r3, [r4, #0]
 8001846:	4833      	ldr	r0, [pc, #204]	@ (8001914 <_printf_i+0x23c>)
 8001848:	2778      	movs	r7, #120	@ 0x78
 800184a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	6831      	ldr	r1, [r6, #0]
 8001852:	061f      	lsls	r7, r3, #24
 8001854:	f851 5b04 	ldr.w	r5, [r1], #4
 8001858:	d402      	bmi.n	8001860 <_printf_i+0x188>
 800185a:	065f      	lsls	r7, r3, #25
 800185c:	bf48      	it	mi
 800185e:	b2ad      	uxthmi	r5, r5
 8001860:	6031      	str	r1, [r6, #0]
 8001862:	07d9      	lsls	r1, r3, #31
 8001864:	bf44      	itt	mi
 8001866:	f043 0320 	orrmi.w	r3, r3, #32
 800186a:	6023      	strmi	r3, [r4, #0]
 800186c:	b11d      	cbz	r5, 8001876 <_printf_i+0x19e>
 800186e:	2310      	movs	r3, #16
 8001870:	e7ac      	b.n	80017cc <_printf_i+0xf4>
 8001872:	4827      	ldr	r0, [pc, #156]	@ (8001910 <_printf_i+0x238>)
 8001874:	e7e9      	b.n	800184a <_printf_i+0x172>
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	f023 0320 	bic.w	r3, r3, #32
 800187c:	6023      	str	r3, [r4, #0]
 800187e:	e7f6      	b.n	800186e <_printf_i+0x196>
 8001880:	4616      	mov	r6, r2
 8001882:	e7bd      	b.n	8001800 <_printf_i+0x128>
 8001884:	6833      	ldr	r3, [r6, #0]
 8001886:	6825      	ldr	r5, [r4, #0]
 8001888:	6961      	ldr	r1, [r4, #20]
 800188a:	1d18      	adds	r0, r3, #4
 800188c:	6030      	str	r0, [r6, #0]
 800188e:	062e      	lsls	r6, r5, #24
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	d501      	bpl.n	8001898 <_printf_i+0x1c0>
 8001894:	6019      	str	r1, [r3, #0]
 8001896:	e002      	b.n	800189e <_printf_i+0x1c6>
 8001898:	0668      	lsls	r0, r5, #25
 800189a:	d5fb      	bpl.n	8001894 <_printf_i+0x1bc>
 800189c:	8019      	strh	r1, [r3, #0]
 800189e:	2300      	movs	r3, #0
 80018a0:	6123      	str	r3, [r4, #16]
 80018a2:	4616      	mov	r6, r2
 80018a4:	e7bc      	b.n	8001820 <_printf_i+0x148>
 80018a6:	6833      	ldr	r3, [r6, #0]
 80018a8:	1d1a      	adds	r2, r3, #4
 80018aa:	6032      	str	r2, [r6, #0]
 80018ac:	681e      	ldr	r6, [r3, #0]
 80018ae:	6862      	ldr	r2, [r4, #4]
 80018b0:	2100      	movs	r1, #0
 80018b2:	4630      	mov	r0, r6
 80018b4:	f7fe fc94 	bl	80001e0 <memchr>
 80018b8:	b108      	cbz	r0, 80018be <_printf_i+0x1e6>
 80018ba:	1b80      	subs	r0, r0, r6
 80018bc:	6060      	str	r0, [r4, #4]
 80018be:	6863      	ldr	r3, [r4, #4]
 80018c0:	6123      	str	r3, [r4, #16]
 80018c2:	2300      	movs	r3, #0
 80018c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80018c8:	e7aa      	b.n	8001820 <_printf_i+0x148>
 80018ca:	6923      	ldr	r3, [r4, #16]
 80018cc:	4632      	mov	r2, r6
 80018ce:	4649      	mov	r1, r9
 80018d0:	4640      	mov	r0, r8
 80018d2:	47d0      	blx	sl
 80018d4:	3001      	adds	r0, #1
 80018d6:	d0ad      	beq.n	8001834 <_printf_i+0x15c>
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	079b      	lsls	r3, r3, #30
 80018dc:	d413      	bmi.n	8001906 <_printf_i+0x22e>
 80018de:	68e0      	ldr	r0, [r4, #12]
 80018e0:	9b03      	ldr	r3, [sp, #12]
 80018e2:	4298      	cmp	r0, r3
 80018e4:	bfb8      	it	lt
 80018e6:	4618      	movlt	r0, r3
 80018e8:	e7a6      	b.n	8001838 <_printf_i+0x160>
 80018ea:	2301      	movs	r3, #1
 80018ec:	4632      	mov	r2, r6
 80018ee:	4649      	mov	r1, r9
 80018f0:	4640      	mov	r0, r8
 80018f2:	47d0      	blx	sl
 80018f4:	3001      	adds	r0, #1
 80018f6:	d09d      	beq.n	8001834 <_printf_i+0x15c>
 80018f8:	3501      	adds	r5, #1
 80018fa:	68e3      	ldr	r3, [r4, #12]
 80018fc:	9903      	ldr	r1, [sp, #12]
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	42ab      	cmp	r3, r5
 8001902:	dcf2      	bgt.n	80018ea <_printf_i+0x212>
 8001904:	e7eb      	b.n	80018de <_printf_i+0x206>
 8001906:	2500      	movs	r5, #0
 8001908:	f104 0619 	add.w	r6, r4, #25
 800190c:	e7f5      	b.n	80018fa <_printf_i+0x222>
 800190e:	bf00      	nop
 8001910:	08001aed 	.word	0x08001aed
 8001914:	08001afe 	.word	0x08001afe

08001918 <memmove>:
 8001918:	4288      	cmp	r0, r1
 800191a:	b510      	push	{r4, lr}
 800191c:	eb01 0402 	add.w	r4, r1, r2
 8001920:	d902      	bls.n	8001928 <memmove+0x10>
 8001922:	4284      	cmp	r4, r0
 8001924:	4623      	mov	r3, r4
 8001926:	d807      	bhi.n	8001938 <memmove+0x20>
 8001928:	1e43      	subs	r3, r0, #1
 800192a:	42a1      	cmp	r1, r4
 800192c:	d008      	beq.n	8001940 <memmove+0x28>
 800192e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001936:	e7f8      	b.n	800192a <memmove+0x12>
 8001938:	4402      	add	r2, r0
 800193a:	4601      	mov	r1, r0
 800193c:	428a      	cmp	r2, r1
 800193e:	d100      	bne.n	8001942 <memmove+0x2a>
 8001940:	bd10      	pop	{r4, pc}
 8001942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800194a:	e7f7      	b.n	800193c <memmove+0x24>

0800194c <_sbrk_r>:
 800194c:	b538      	push	{r3, r4, r5, lr}
 800194e:	4d06      	ldr	r5, [pc, #24]	@ (8001968 <_sbrk_r+0x1c>)
 8001950:	2300      	movs	r3, #0
 8001952:	4604      	mov	r4, r0
 8001954:	4608      	mov	r0, r1
 8001956:	602b      	str	r3, [r5, #0]
 8001958:	f7ff fa40 	bl	8000ddc <_sbrk>
 800195c:	1c43      	adds	r3, r0, #1
 800195e:	d102      	bne.n	8001966 <_sbrk_r+0x1a>
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	b103      	cbz	r3, 8001966 <_sbrk_r+0x1a>
 8001964:	6023      	str	r3, [r4, #0]
 8001966:	bd38      	pop	{r3, r4, r5, pc}
 8001968:	200001c8 	.word	0x200001c8

0800196c <memcpy>:
 800196c:	440a      	add	r2, r1
 800196e:	4291      	cmp	r1, r2
 8001970:	f100 33ff 	add.w	r3, r0, #4294967295
 8001974:	d100      	bne.n	8001978 <memcpy+0xc>
 8001976:	4770      	bx	lr
 8001978:	b510      	push	{r4, lr}
 800197a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800197e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001982:	4291      	cmp	r1, r2
 8001984:	d1f9      	bne.n	800197a <memcpy+0xe>
 8001986:	bd10      	pop	{r4, pc}

08001988 <_realloc_r>:
 8001988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800198c:	4680      	mov	r8, r0
 800198e:	4615      	mov	r5, r2
 8001990:	460c      	mov	r4, r1
 8001992:	b921      	cbnz	r1, 800199e <_realloc_r+0x16>
 8001994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001998:	4611      	mov	r1, r2
 800199a:	f7ff bc4b 	b.w	8001234 <_malloc_r>
 800199e:	b92a      	cbnz	r2, 80019ac <_realloc_r+0x24>
 80019a0:	f7ff fbdc 	bl	800115c <_free_r>
 80019a4:	2400      	movs	r4, #0
 80019a6:	4620      	mov	r0, r4
 80019a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019ac:	f000 f81a 	bl	80019e4 <_malloc_usable_size_r>
 80019b0:	4285      	cmp	r5, r0
 80019b2:	4606      	mov	r6, r0
 80019b4:	d802      	bhi.n	80019bc <_realloc_r+0x34>
 80019b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80019ba:	d8f4      	bhi.n	80019a6 <_realloc_r+0x1e>
 80019bc:	4629      	mov	r1, r5
 80019be:	4640      	mov	r0, r8
 80019c0:	f7ff fc38 	bl	8001234 <_malloc_r>
 80019c4:	4607      	mov	r7, r0
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d0ec      	beq.n	80019a4 <_realloc_r+0x1c>
 80019ca:	42b5      	cmp	r5, r6
 80019cc:	462a      	mov	r2, r5
 80019ce:	4621      	mov	r1, r4
 80019d0:	bf28      	it	cs
 80019d2:	4632      	movcs	r2, r6
 80019d4:	f7ff ffca 	bl	800196c <memcpy>
 80019d8:	4621      	mov	r1, r4
 80019da:	4640      	mov	r0, r8
 80019dc:	f7ff fbbe 	bl	800115c <_free_r>
 80019e0:	463c      	mov	r4, r7
 80019e2:	e7e0      	b.n	80019a6 <_realloc_r+0x1e>

080019e4 <_malloc_usable_size_r>:
 80019e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019e8:	1f18      	subs	r0, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bfbc      	itt	lt
 80019ee:	580b      	ldrlt	r3, [r1, r0]
 80019f0:	18c0      	addlt	r0, r0, r3
 80019f2:	4770      	bx	lr

080019f4 <_init>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	bf00      	nop
 80019f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fa:	bc08      	pop	{r3}
 80019fc:	469e      	mov	lr, r3
 80019fe:	4770      	bx	lr

08001a00 <_fini>:
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	bf00      	nop
 8001a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a06:	bc08      	pop	{r3}
 8001a08:	469e      	mov	lr, r3
 8001a0a:	4770      	bx	lr
